{
    "docs": [
        {
            "location": "/", 
            "text": "Welcome to CodigoDelSur's Knowledge Base\n\n\n\n    \n\n\n\n\n\n\n    On this website we want to share some useful links, information and lessons learned here at \nCodigoDelSur\n. This site is built by us, feel free to contribute your knowledge so others can learn from you as well!\n\n\n\n\n\n    To get started find in the menu tabs technologies and other resources for you to take a look.\n\n\n\n\nHope you enjoy it!", 
            "title": "Home"
        }, 
        {
            "location": "/#welcome-to-codigodelsurs-knowledge-base", 
            "text": "On this website we want to share some useful links, information and lessons learned here at  CodigoDelSur . This site is built by us, feel free to contribute your knowledge so others can learn from you as well!  \n    To get started find in the menu tabs technologies and other resources for you to take a look.  Hope you enjoy it!", 
            "title": "Welcome to CodigoDelSur's Knowledge Base"
        }, 
        {
            "location": "/New at CodigoDelSur/First_Steps/", 
            "text": "First Steps\n\n\nWelcome to CodigoDelSur! Here you will see a tiny guide about what to do on your first steps here at CDS. Also to know little bit more about the CodigoDelSur\u2019s team please check this \nlink\n.\n\n\nInner communication\n\n\n\n\n\n\nMail:\n On your first day you will be provided with an email account. This account should have the next format:\n\n\n[first character of your name][ last name]@codigodelsur.com.\n\n\nYou must use this mail every time you create any other service account like Github,, Bitbucket, Slack, Skype, etc.\n\n\n\n\n\n\nSlack:\n You will be invited to the slack team codigodelsur.slack.com. There you can join different channels like \n#developers\n, \n#ios_devs\n, \n#android_devs\n ,etc\n\n\n\n\n\n\nSkype:\n Please create a Skype account with your codigodelsur mail account.\n\n\n\n\n\n\nGithub\n\n\nYou will need to create a Github account with your Codigodelsur email. The account name should have this format:\n\n\n[first character of your name][last name]cds\n \n\n\nAlso please enable two-factor authentication!\nNotify the creation of the Github account so can be invited to join the CodigoDelSur\u2019s Github \norganization\n.\n\n\nIf you are new at git we highly recommend you to read this page.\n\n\nLastPass\n\n\nWhat is Lastpass?\n\n\n\n\n\n\nLastPass is a password management service that stores passwords in private accounts. So, any time you need to store or share a password please use lastpass, don\u2019t use text files, mails, slack, etc.\n\n\n\n\nHow can I start using Lastpass?\n\n\n\n\nYou will be receive an account activation email. While your are activating the account you will create you master password, please enter a password with at least 12 character that contains upper and lower cases and a digit.\n\n\n\n\n\n\n\n\nAs a rule at CodigoDelSur, all Lastpass account must include a two-factor authentication method. We recommend using Google Authenticator. Once you configure your 2fa method you are ready to start using Lastpass.\n\n\n\n\n\n\nTip:\n In order to access easily to your password vault while you are surfing the web you can download the LastPass web extensions.\n\n\nYour computer\n\n\nFirst you need to check that the software that you are using is updated (IDEs, xCode, OS, etc). Then check if your network configuration is OK. You should have a static IP and you configuration should look something like this:\n\n\nIP: 192.168.10.xxx\nGateway: 192.168.10.1\nMask: 255.255.255.0\n\nDNSs: 192.168.10.1, 206.99.44.254, 8.8.8.8\n\n\n\nClub de lectura t\u00e9cnica\n\n\nWhat is the \u201cClub de lectura t\u00e9cnica\u201d? Once in a couple of week, some developers join together to discuss a previously read tech book. Its a fun opportunity to learn about interesting things and have a good time at the same time. If you want to know more please join to the slack channel \n#club_lectura_tecnica", 
            "title": "First Steps"
        }, 
        {
            "location": "/New at CodigoDelSur/First_Steps/#first-steps", 
            "text": "Welcome to CodigoDelSur! Here you will see a tiny guide about what to do on your first steps here at CDS. Also to know little bit more about the CodigoDelSur\u2019s team please check this  link .", 
            "title": "First Steps"
        }, 
        {
            "location": "/New at CodigoDelSur/First_Steps/#inner-communication", 
            "text": "Mail:  On your first day you will be provided with an email account. This account should have the next format:  [first character of your name][ last name]@codigodelsur.com.  You must use this mail every time you create any other service account like Github,, Bitbucket, Slack, Skype, etc.    Slack:  You will be invited to the slack team codigodelsur.slack.com. There you can join different channels like  #developers ,  #ios_devs ,  #android_devs  ,etc    Skype:  Please create a Skype account with your codigodelsur mail account.", 
            "title": "Inner communication"
        }, 
        {
            "location": "/New at CodigoDelSur/First_Steps/#github", 
            "text": "You will need to create a Github account with your Codigodelsur email. The account name should have this format:  [first character of your name][last name]cds    Also please enable two-factor authentication!\nNotify the creation of the Github account so can be invited to join the CodigoDelSur\u2019s Github  organization .  If you are new at git we highly recommend you to read this page.", 
            "title": "Github"
        }, 
        {
            "location": "/New at CodigoDelSur/First_Steps/#lastpass", 
            "text": "", 
            "title": "LastPass"
        }, 
        {
            "location": "/New at CodigoDelSur/First_Steps/#what-is-lastpass", 
            "text": "LastPass is a password management service that stores passwords in private accounts. So, any time you need to store or share a password please use lastpass, don\u2019t use text files, mails, slack, etc.", 
            "title": "What is Lastpass?"
        }, 
        {
            "location": "/New at CodigoDelSur/First_Steps/#how-can-i-start-using-lastpass", 
            "text": "You will be receive an account activation email. While your are activating the account you will create you master password, please enter a password with at least 12 character that contains upper and lower cases and a digit.     As a rule at CodigoDelSur, all Lastpass account must include a two-factor authentication method. We recommend using Google Authenticator. Once you configure your 2fa method you are ready to start using Lastpass.    Tip:  In order to access easily to your password vault while you are surfing the web you can download the LastPass web extensions.", 
            "title": "How can I start using Lastpass?"
        }, 
        {
            "location": "/New at CodigoDelSur/First_Steps/#your-computer", 
            "text": "First you need to check that the software that you are using is updated (IDEs, xCode, OS, etc). Then check if your network configuration is OK. You should have a static IP and you configuration should look something like this:  IP: 192.168.10.xxx\nGateway: 192.168.10.1\nMask: 255.255.255.0\n\nDNSs: 192.168.10.1, 206.99.44.254, 8.8.8.8", 
            "title": "Your computer"
        }, 
        {
            "location": "/New at CodigoDelSur/First_Steps/#club-de-lectura-tecnica", 
            "text": "What is the \u201cClub de lectura t\u00e9cnica\u201d? Once in a couple of week, some developers join together to discuss a previously read tech book. Its a fun opportunity to learn about interesting things and have a good time at the same time. If you want to know more please join to the slack channel  #club_lectura_tecnica", 
            "title": "Club de lectura t\u00e9cnica"
        }, 
        {
            "location": "/New at CodigoDelSur/Learn_Agile/", 
            "text": "What is Agile?\n\n\n\n\nAgile is a structured and iterative approach to project management and product development, most commonly used for software. It gives you the ability to respond to change without going off the rails, which is good news for any team. When a team transitions to agile from traditional software development, such as waterfall, they should remember that it is a cultural and technical philosophy, not just a set of ceremonies.\n- \natlassian.com\n\n\n\n\nThere are serveral Agile methodologies, the most popular are: Scrum, Kanban, Extreme Programming, Crystal, Dynamic Systems Development Method and Feature-Driven Development. You can learn more about all this different methodologies by entering this \nlink\n. \n\n\nAgile Manifesto\n\n\nThe term agile came form the Agile Manifesto. This Manifesto was created when seventeen well-known software development figures met together to discuss about the issues that development methods were having. On that meeting they redacted \n4 Values and 12 Principles\n.\n\n\n\n\n\nScrum\n\n\nAt CodigoDelSur we mostly use \nScrum\n. When we started using this agile methodology, it gave us really good results in our projects. We adopted scrum with a step by step process: we first pick some of the scrum elements that we thought that will be more useful for us. For example, on some projects we started with the daily standup and the sprint retrospective meeting, and then we continue  adding more Srcum ceremonies and elements.   \n\n\nYou can get a quick picture of this methodology by watching thid video:\n\n\n\n\n\nIf you want to know a little bit more about the roles, ceremonies and components of scrum you can check this links:\n\n\n\n\nhttps://www.atlassian.com/agile/scrum\n\n\nhttps://www.atlassian.com/agile/ceremonies\n\n\nhttps://www.agilealliance.org/glossary/backlog-grooming/\n\n\n\n\nAlthough we love all the Scrum components, we are conscious that Scrum is just a framework, some elements might not apply to all projects. Furthermore, some projects, given its specific nature, might not event be appropriate for Scrum methodology. We believe that beyond the Scrum framework the key value on this agile methodology is in the concepts and the philosophy that the framework helps you to develop. Concepts like continuous improvement, business-value-oriented features, adaptation to changes, client integration on the development process, etc.   \n\n\nInternal Quality\n\n\nIn contrast to other methodologies like Extreme Programming, Scrum doesn't specify technical practices to tackle products internal quality, it is mainly centered on project management techniques. We strongly believe that the software internal quality is something that should not be negotiable. If you don't pay attention to the internal quality of your products, you will end soon fighting with your software code to add functionalities and fixing bugs. This will decrease drastically the productivity of the team. \n\n\nWe have learned that the technical practices that monitors and take care of the internal quality may vary between projects and technologies but here we will mention some common practices that can be applied on every project:\n\n\nTechnical debt\n is a metaphor that compares the poor quality code of a software project with a financial debt. Is crucial to know that all projects will have at least a minimum technical debt, it will appear for different reasons: Human error, misunderstanding, short time lapse, features changes, etc. Is our responsibility to track and try to pay off that debt. What we usually do in our projects is to have a separate backlog were we can add all the technical debt items that we found in the code. This keep us conscious of the debt. On every sprint planning we analyze which items on the technical debt backlog can be tacked on that sprint.\n\n\nDefinition of Done\n is a crucial concept, it consists in a list of activities added to the User Stories (writing code, coding comments, unit testing, integration testing, release notes, design documents, etc.). In order to consider a Task done all the items on the list must be done. This simple activity improves the quality on the software development process. The fact that the whole team stablish a \"done criteria\", removes a lot of doubts at the moment to the determine the acceptance level of a certain task. Also is very important that the tasks must be well described and must have a clear output so the developers involve on that task doesn't have missunderstanding errors. \n\n\nContinuous Integration\n is a well know practice that many developer teams had acquired. Basically Continuous Integration consist in execute plenty frequently an automated integration procedure (download app source, build app, execute tests, etc.) in order to rapidly detect errors and always ensure a deliverable build. Here at CodigoDelSur we are really happy with the results of this practice, it has been super helpful to anticipate issues on our apps.\n\n\nReferences:\n\n\n\n\nhttps://www.scrumalliance.org/community/articles/2008/september/what-is-definition-of-done-(dod)\n\n\nhttps://martinfowler.com/bliki/FlaccidScrum.html\n\n\nhttps://martinfowler.com/bliki/TechnicalDebt.html\n\n\nhttps://www.scrumalliance.org/why-scrum", 
            "title": "Learn Agile"
        }, 
        {
            "location": "/New at CodigoDelSur/Learn_Agile/#what-is-agile", 
            "text": "Agile is a structured and iterative approach to project management and product development, most commonly used for software. It gives you the ability to respond to change without going off the rails, which is good news for any team. When a team transitions to agile from traditional software development, such as waterfall, they should remember that it is a cultural and technical philosophy, not just a set of ceremonies.\n-  atlassian.com   There are serveral Agile methodologies, the most popular are: Scrum, Kanban, Extreme Programming, Crystal, Dynamic Systems Development Method and Feature-Driven Development. You can learn more about all this different methodologies by entering this  link .", 
            "title": "What is Agile?"
        }, 
        {
            "location": "/New at CodigoDelSur/Learn_Agile/#agile-manifesto", 
            "text": "The term agile came form the Agile Manifesto. This Manifesto was created when seventeen well-known software development figures met together to discuss about the issues that development methods were having. On that meeting they redacted  4 Values and 12 Principles .", 
            "title": "Agile Manifesto"
        }, 
        {
            "location": "/New at CodigoDelSur/Learn_Agile/#scrum", 
            "text": "At CodigoDelSur we mostly use  Scrum . When we started using this agile methodology, it gave us really good results in our projects. We adopted scrum with a step by step process: we first pick some of the scrum elements that we thought that will be more useful for us. For example, on some projects we started with the daily standup and the sprint retrospective meeting, and then we continue  adding more Srcum ceremonies and elements.     You can get a quick picture of this methodology by watching thid video:   If you want to know a little bit more about the roles, ceremonies and components of scrum you can check this links:   https://www.atlassian.com/agile/scrum  https://www.atlassian.com/agile/ceremonies  https://www.agilealliance.org/glossary/backlog-grooming/   Although we love all the Scrum components, we are conscious that Scrum is just a framework, some elements might not apply to all projects. Furthermore, some projects, given its specific nature, might not event be appropriate for Scrum methodology. We believe that beyond the Scrum framework the key value on this agile methodology is in the concepts and the philosophy that the framework helps you to develop. Concepts like continuous improvement, business-value-oriented features, adaptation to changes, client integration on the development process, etc.", 
            "title": "Scrum"
        }, 
        {
            "location": "/New at CodigoDelSur/Learn_Agile/#internal-quality", 
            "text": "In contrast to other methodologies like Extreme Programming, Scrum doesn't specify technical practices to tackle products internal quality, it is mainly centered on project management techniques. We strongly believe that the software internal quality is something that should not be negotiable. If you don't pay attention to the internal quality of your products, you will end soon fighting with your software code to add functionalities and fixing bugs. This will decrease drastically the productivity of the team.   We have learned that the technical practices that monitors and take care of the internal quality may vary between projects and technologies but here we will mention some common practices that can be applied on every project:  Technical debt  is a metaphor that compares the poor quality code of a software project with a financial debt. Is crucial to know that all projects will have at least a minimum technical debt, it will appear for different reasons: Human error, misunderstanding, short time lapse, features changes, etc. Is our responsibility to track and try to pay off that debt. What we usually do in our projects is to have a separate backlog were we can add all the technical debt items that we found in the code. This keep us conscious of the debt. On every sprint planning we analyze which items on the technical debt backlog can be tacked on that sprint.  Definition of Done  is a crucial concept, it consists in a list of activities added to the User Stories (writing code, coding comments, unit testing, integration testing, release notes, design documents, etc.). In order to consider a Task done all the items on the list must be done. This simple activity improves the quality on the software development process. The fact that the whole team stablish a \"done criteria\", removes a lot of doubts at the moment to the determine the acceptance level of a certain task. Also is very important that the tasks must be well described and must have a clear output so the developers involve on that task doesn't have missunderstanding errors.   Continuous Integration  is a well know practice that many developer teams had acquired. Basically Continuous Integration consist in execute plenty frequently an automated integration procedure (download app source, build app, execute tests, etc.) in order to rapidly detect errors and always ensure a deliverable build. Here at CodigoDelSur we are really happy with the results of this practice, it has been super helpful to anticipate issues on our apps.", 
            "title": "Internal Quality"
        }, 
        {
            "location": "/New at CodigoDelSur/Learn_Agile/#references", 
            "text": "https://www.scrumalliance.org/community/articles/2008/september/what-is-definition-of-done-(dod)  https://martinfowler.com/bliki/FlaccidScrum.html  https://martinfowler.com/bliki/TechnicalDebt.html  https://www.scrumalliance.org/why-scrum", 
            "title": "References:"
        }, 
        {
            "location": "/Technologies/AWS/1._Getting_Started/", 
            "text": "Getting started with Amazon Web Services\n\n\n\n\n\n\nAmazon Web Services also known simply as AWS is a cloud services platform which offers application hosting, database storage, content delivery and many other services.\n\n\n\n\nAWS is one of the most used infrastructures in software development. Its large number of services and tools makes it a preferred system. Although it is considered one of the most expensive, the continuous maintenance and improvement of the system are notorious in the quality and support of the utilities that distinguish it from the rest of the competitors.\n\n\n\n\nOn the web you can find a lot of information related to AWS, but here we focus to describe the mostly common services and resources which are used on every project making use of Amazon. The vast amount of concepts that are handled in AWS can be overwhelming so you might want to follow the basics here and then you can expand your knowledge out there.\n\n\n\n\nAs mentioned earlier AWS provides an extensive list of services thus the things you might want to learn probably depends on the things you need to do. Nevertheless the most common usage is to deploy an application, an API or any other type of software so others can se it from around the globe. So let's start with such assumption and move around from there.\n\n\n\n\nThe following topics will be covered along this documentation:\n\n\n\n    \nEC2\n\n    \nS3\n\n    \nRDS\n\n    \nLoad Balancing\n\n    \nElastic Beanstalk", 
            "title": "1. Getting Started"
        }, 
        {
            "location": "/Technologies/AWS/1._Getting_Started/#getting-started-with-amazon-web-services", 
            "text": "Amazon Web Services also known simply as AWS is a cloud services platform which offers application hosting, database storage, content delivery and many other services.  \nAWS is one of the most used infrastructures in software development. Its large number of services and tools makes it a preferred system. Although it is considered one of the most expensive, the continuous maintenance and improvement of the system are notorious in the quality and support of the utilities that distinguish it from the rest of the competitors.  \nOn the web you can find a lot of information related to AWS, but here we focus to describe the mostly common services and resources which are used on every project making use of Amazon. The vast amount of concepts that are handled in AWS can be overwhelming so you might want to follow the basics here and then you can expand your knowledge out there.  \nAs mentioned earlier AWS provides an extensive list of services thus the things you might want to learn probably depends on the things you need to do. Nevertheless the most common usage is to deploy an application, an API or any other type of software so others can se it from around the globe. So let's start with such assumption and move around from there.", 
            "title": "Getting started with Amazon Web Services"
        }, 
        {
            "location": "/Technologies/AWS/2._EC2/", 
            "text": "Getting started on EC2\n\n\n\n\nEC2 is the abbreviation for Amazon Elastic Compute Cloud. This service consists in the usage of computers instances existing in the cloud which we can use in the same manner as if they would be in our own desktops. The EC2 service is highly flexible giving the developer the ability to choose for the instance the hardware capacity, such as memory, CPU, hard drive space, as well as the software configuration, such as operating system, installed application and packages, network configuration among others.\n\n\nHow to create an EC2 instance and connect to it?\n\n\nThe creating flow for an EC2 instance can be easily done through the AWS console. Go to services EC2 and then EC2 Dashboard. The normal flow is divided in the steps detailed below.\n\n\n\n1. Choosing a basic image.\n\nThe selected image comes with a set of basic resources installed. The right option for us depends on what we want to develop and if it important an specific OS. But in general, or at least for the projects we manage at CDS, the Linux image is the right one most of the times. It is importan to mention that you can also create custom images, also known as AMI that can be used in the future as the base for other instances. For example you create a basic Linux instance, then you install git, npm and node js. You can save a new AMI with the configuration and the next time you need a instance with those things installed you can use it again.\n\n\n2. Choose an instance type.\n\n\n\nHere we specify the hardware properties which basically depends on the things we need to support. For example if we want to deploy a game we might want to choose an instance with high card graphics resource. For a general purpose, an m3.medium is a very good choise. If you are wondering how will work my app with the free t2.micro instance, well, the free things are free for something. This instance has very low resources thus is very common your application becomes unavailable after a while.\n\n\n3. Set storage.\n\n\n\nThis indicates the space for the hard drive attached to the instance. The size selected for this depends if we plan to store a database or local files on the instance. Otherwise it would be enough with just a few GB.\n\n\n4. Security groups\n\n\n\nSecurity groups as its name describes in in charge of setting up security access into the instance. The configuration is based on inbound/outbound rules allowing network access to your application. Normally for a web app we want to have port 80 open to the world and port 22 for SSH access. Usually the default security group is enough to get started.\n\n\n5. Create an API key\n\n\n\nThis key will provide SSH access into the instance allowing us to manipulate and install the machine on the cloud same was as we do it locally. Put a nice name, store it safely and don't share with anyone else besides your teammates.\n\n\n6. Monitor and connect to the instance\n\n\n\nFinish the setup and wait a few minutes while things get cook. Take a look to the EC2 Dashboard where you can found information about the instance and its performance status. In order to connect to the instance we should use the key described in the last point. Run the following command on your console to access the instance:\n    \nssh -i your_key_file.pem ec2-user@ec2-instance-ip\n\n\nWhere ec2-instance-ip is clearly your instance's IP address which you can also found in the Dashboard.\nIn case you receive an error with the above command you might need to set proper permissions to the KEY. Try running \nchmod 400 your_key_file.pem\n\n\nFor further reading on this topic please visit \nthis\n.\n\n\nNext steps\n\n\nIs very common for a project the need to store files such as images, videos, or any other content. AWS provides another great service for files storage and management: \nS3", 
            "title": "2. EC2"
        }, 
        {
            "location": "/Technologies/AWS/2._EC2/#getting-started-on-ec2", 
            "text": "EC2 is the abbreviation for Amazon Elastic Compute Cloud. This service consists in the usage of computers instances existing in the cloud which we can use in the same manner as if they would be in our own desktops. The EC2 service is highly flexible giving the developer the ability to choose for the instance the hardware capacity, such as memory, CPU, hard drive space, as well as the software configuration, such as operating system, installed application and packages, network configuration among others.", 
            "title": "Getting started on EC2"
        }, 
        {
            "location": "/Technologies/AWS/2._EC2/#how-to-create-an-ec2-instance-and-connect-to-it", 
            "text": "The creating flow for an EC2 instance can be easily done through the AWS console. Go to services EC2 and then EC2 Dashboard. The normal flow is divided in the steps detailed below.", 
            "title": "How to create an EC2 instance and connect to it?"
        }, 
        {
            "location": "/Technologies/AWS/2._EC2/#next-steps", 
            "text": "Is very common for a project the need to store files such as images, videos, or any other content. AWS provides another great service for files storage and management:  S3", 
            "title": "Next steps"
        }, 
        {
            "location": "/Technologies/AWS/3._S3/", 
            "text": "Amazon Web Services: S3\n\n\n\n\nIt is very common for a project to use static files such as images, videos, style files, scripts, audios, etc. Handling this type of data ourselves can become complex for security and availability mainly. A great alternative is to use AWS S3, the storage service that offers optimised file management as well as a robust and reliable space to store our content. Its operation is similar to any file system where directories and paths are used to reference static data. The main division comes under the concept of buckets that can be used to separate environments or concepts from our application, then each bucket will have its own file system.\n\n\nThere are four basic operations over S3 that you can perform:\n\n\n\n\nCreate a bucket\n\n\nAdd an object to a bucket\n\n\nEdit an object\n\n\nDelete an object\n\n\n\n\nThese operations can be done directly from the Dashboard but more important you can do it from your application using the proper AWS SDK for the technology you are using.\n\n\nMore about S3 \nhere\n\n\nCloudfront\n\n\nAmazon CloudFront is a global content delivery network (CDN) service that accelerates delivery of your websites, APIs, video content or other web assets. Is the perfect complement for S3. It works by taking into account the origin of a certain request to deliver the requested content from the optmimal path. That way the bytes travel along the fastest route for the client ensuring the best posible network perfomance. AWS can provide this capabilities by replicating the resources along its infrastructure centers\n\n\nThis service is really useful if clients or users acccesing our application come from around the globe. We then can offer the same performance for all of them if we have for example a web app or simply certain content with files hosted in S3.\n\n\nRead more about Cloudfront service \nhere\n\n\nNext steps\n\n\nNow that we know we can store static files in AWS, let's jump to Databases management into AWS, where we will only focus in relational databases, which are provided for a service called \nRDS", 
            "title": "3. S3"
        }, 
        {
            "location": "/Technologies/AWS/3._S3/#amazon-web-services-s3", 
            "text": "It is very common for a project to use static files such as images, videos, style files, scripts, audios, etc. Handling this type of data ourselves can become complex for security and availability mainly. A great alternative is to use AWS S3, the storage service that offers optimised file management as well as a robust and reliable space to store our content. Its operation is similar to any file system where directories and paths are used to reference static data. The main division comes under the concept of buckets that can be used to separate environments or concepts from our application, then each bucket will have its own file system.  There are four basic operations over S3 that you can perform:   Create a bucket  Add an object to a bucket  Edit an object  Delete an object   These operations can be done directly from the Dashboard but more important you can do it from your application using the proper AWS SDK for the technology you are using.  More about S3  here", 
            "title": "Amazon Web Services: S3"
        }, 
        {
            "location": "/Technologies/AWS/3._S3/#cloudfront", 
            "text": "Amazon CloudFront is a global content delivery network (CDN) service that accelerates delivery of your websites, APIs, video content or other web assets. Is the perfect complement for S3. It works by taking into account the origin of a certain request to deliver the requested content from the optmimal path. That way the bytes travel along the fastest route for the client ensuring the best posible network perfomance. AWS can provide this capabilities by replicating the resources along its infrastructure centers  This service is really useful if clients or users acccesing our application come from around the globe. We then can offer the same performance for all of them if we have for example a web app or simply certain content with files hosted in S3.  Read more about Cloudfront service  here", 
            "title": "Cloudfront"
        }, 
        {
            "location": "/Technologies/AWS/3._S3/#next-steps", 
            "text": "Now that we know we can store static files in AWS, let's jump to Databases management into AWS, where we will only focus in relational databases, which are provided for a service called  RDS", 
            "title": "Next steps"
        }, 
        {
            "location": "/Technologies/AWS/4._RDS/", 
            "text": "Amazon Web Services: RDS\n\n\n\n\nRDS o Relataional Database System is the service provided by AWS to host, obviously, relational databases in the cloud. It provide the most used engines such as: MySQL, Postgres, Oracle.\n\n\nManagement\n\n\nAmazon provides an easy to follow interface to create and manage the databases, offering monitoring, logs, performance stats among others. We can scale our database layer both vertically and horizontally by increasing the hardware properties o by adding read replicas respectively. In order to use this service we just configure everything from the console and get the database connection which is used from our application. We should also set security constraints for production databases so hey can only be accesed by specific EC2 instances.\n\n\nOther features\n\n\n\n\nMulti-Availabity zones\n\n\nBackups\n\n\nStorage options (SSD, General Purpose, etc)\n\n\nHighly secure\n\n\n\n\nRead more about RDS \nhere\n\n\nNext steps\n\n\nWe have our instance running, the media files have their place and now we're connected to the database on the cloud using a service with high performance in a separate layer from our main application. Let's continue scaling our architecture by adding extra instances and seeing how to manage them together using the concept of a \nLoad Balancer", 
            "title": "4. RDS"
        }, 
        {
            "location": "/Technologies/AWS/4._RDS/#amazon-web-services-rds", 
            "text": "RDS o Relataional Database System is the service provided by AWS to host, obviously, relational databases in the cloud. It provide the most used engines such as: MySQL, Postgres, Oracle.", 
            "title": "Amazon Web Services: RDS"
        }, 
        {
            "location": "/Technologies/AWS/4._RDS/#management", 
            "text": "Amazon provides an easy to follow interface to create and manage the databases, offering monitoring, logs, performance stats among others. We can scale our database layer both vertically and horizontally by increasing the hardware properties o by adding read replicas respectively. In order to use this service we just configure everything from the console and get the database connection which is used from our application. We should also set security constraints for production databases so hey can only be accesed by specific EC2 instances.", 
            "title": "Management"
        }, 
        {
            "location": "/Technologies/AWS/4._RDS/#other-features", 
            "text": "Multi-Availabity zones  Backups  Storage options (SSD, General Purpose, etc)  Highly secure   Read more about RDS  here", 
            "title": "Other features"
        }, 
        {
            "location": "/Technologies/AWS/4._RDS/#next-steps", 
            "text": "We have our instance running, the media files have their place and now we're connected to the database on the cloud using a service with high performance in a separate layer from our main application. Let's continue scaling our architecture by adding extra instances and seeing how to manage them together using the concept of a  Load Balancer", 
            "title": "Next steps"
        }, 
        {
            "location": "/Technologies/AWS/5._LoadBalancer/", 
            "text": "Amazon Web Services: Load Balancing\n\n\nSo the EC2 instance host our application on the cloud and everything seems fine so far, but probably our beatiful work end up on making the application very popular so a ton of new users is willing to use our software. Eventually that will bring issues on the performance as the hardware offered by an instance used to start with an initial version won't be enough as the usage grows.\n\n\nOne of the ways to solve this is to add more power to our EC2 instace, this is, scaling it vertically. But what happens if the instance dies or simply reboots or if there is a hardware issue, because at the end they are only machine in someone's else home. What happens is that our app becomes unavailable and probably we'll need to put it to work again.\nThe best approach is to have additional instances, so more can be added or removed on demand. This is, scaling our architecture horizontally. Each instance will run the same code and know how to solve each request independently.\n\n\nAlthough we can have several replicas of the code, clients accesing our app needs an unique entry point, here is where it comes the concept of Load Balancing. A load balancer is a new piece in our architecture which works as a middle man between the outside requests and the instances running our program. AWS provides this services through Elastic Load Balancing which automatically distributes incoming application traffic across multiple Amazon EC2 instances. It enables you to achieve fault tolerance in your applications, seamlessly providing the required amount of load balancing capacity needed to route application traffic.\n\n\nRead more details about AWS Elastic Load Balancer \nhere\n\n\nAutoscaling\n\n\nWhen discussing architecture scalability, one of the options mentioned was to do it horizontally. Fortunately, Amazon provides Auto Scaling, a service that helps to maintain application availability and allows to scale the EC2 instances capacity up or down automatically according to conditions you define. You can use Auto Scaling to help ensure that you are running your desired number of Amazon EC2 instances. Auto Scaling can also automatically increase the number of Amazon EC2 instances during demand spikes to maintain performance and decrease capacity during a low usage period of the application. The most common conditions used are CPU usage and Network traffic where we can adjust the values that work better for the expected performance.\n\n\nTake a look to the docs of Auto Scaling \nhere\n\n\nNext Steps\n\n\nHandling all these services can be complicated, but one more time AWS will help us to keep them all together with \nElastic Beanstalk", 
            "title": "5. LoadBalancer"
        }, 
        {
            "location": "/Technologies/AWS/5._LoadBalancer/#amazon-web-services-load-balancing", 
            "text": "So the EC2 instance host our application on the cloud and everything seems fine so far, but probably our beatiful work end up on making the application very popular so a ton of new users is willing to use our software. Eventually that will bring issues on the performance as the hardware offered by an instance used to start with an initial version won't be enough as the usage grows.  One of the ways to solve this is to add more power to our EC2 instace, this is, scaling it vertically. But what happens if the instance dies or simply reboots or if there is a hardware issue, because at the end they are only machine in someone's else home. What happens is that our app becomes unavailable and probably we'll need to put it to work again.\nThe best approach is to have additional instances, so more can be added or removed on demand. This is, scaling our architecture horizontally. Each instance will run the same code and know how to solve each request independently.  Although we can have several replicas of the code, clients accesing our app needs an unique entry point, here is where it comes the concept of Load Balancing. A load balancer is a new piece in our architecture which works as a middle man between the outside requests and the instances running our program. AWS provides this services through Elastic Load Balancing which automatically distributes incoming application traffic across multiple Amazon EC2 instances. It enables you to achieve fault tolerance in your applications, seamlessly providing the required amount of load balancing capacity needed to route application traffic.  Read more details about AWS Elastic Load Balancer  here", 
            "title": "Amazon Web Services: Load Balancing"
        }, 
        {
            "location": "/Technologies/AWS/5._LoadBalancer/#autoscaling", 
            "text": "When discussing architecture scalability, one of the options mentioned was to do it horizontally. Fortunately, Amazon provides Auto Scaling, a service that helps to maintain application availability and allows to scale the EC2 instances capacity up or down automatically according to conditions you define. You can use Auto Scaling to help ensure that you are running your desired number of Amazon EC2 instances. Auto Scaling can also automatically increase the number of Amazon EC2 instances during demand spikes to maintain performance and decrease capacity during a low usage period of the application. The most common conditions used are CPU usage and Network traffic where we can adjust the values that work better for the expected performance.  Take a look to the docs of Auto Scaling  here", 
            "title": "Autoscaling"
        }, 
        {
            "location": "/Technologies/AWS/5._LoadBalancer/#next-steps", 
            "text": "Handling all these services can be complicated, but one more time AWS will help us to keep them all together with  Elastic Beanstalk", 
            "title": "Next Steps"
        }, 
        {
            "location": "/Technologies/AWS/6._EB/", 
            "text": "Amazon Web Services: Elastic Beanstalk\n\n\n\n\nAWS Elastic Beanstalk is an easy-to-use service for deploying and scaling web applications and services. You can simply upload your code and Elastic Beanstalk automatically handles the deployment, from capacity provisioning, load balancing, auto-scaling to application health monitoring. At the same time, you retain full control over the AWS resources powering your application and can access the underlying resources at any time.\n\n\nAll the things we mentioned in past sections can be managed in one place and from a single web console. Besides, we can keep track of versioned deploys having the ability to rollback in any moment. Beanstalk also uses the concept of Environments which makes it perfect for a tipical pipeline such as 'development', 'staging', 'production'. These is a simplified version of how this service works.\n\n\n\n\n\nYou can obviously change the architecture configuration at any time and even define with just a few clicks how do you prefer the deploy process to happen. For example if shouldn't have downtime between new releases.\n\n\nFind more information about Elastic Beanstalk \nhere\n\n\nNext Steps\n\n\nThis 5 sections were a very quick introduction to the AWS world. Certainly you'll find a vast amount of services solving the most common (and not so much) problems of software development. The AWS documentation is very detailed and extensive so you'll have more than enough to read about each topic of your interest.\n\n\nHere\n you can found the resource links we choose for you to take a look in a more advanced approach for the things we discussed.", 
            "title": "6. EB"
        }, 
        {
            "location": "/Technologies/AWS/6._EB/#amazon-web-services-elastic-beanstalk", 
            "text": "AWS Elastic Beanstalk is an easy-to-use service for deploying and scaling web applications and services. You can simply upload your code and Elastic Beanstalk automatically handles the deployment, from capacity provisioning, load balancing, auto-scaling to application health monitoring. At the same time, you retain full control over the AWS resources powering your application and can access the underlying resources at any time.  All the things we mentioned in past sections can be managed in one place and from a single web console. Besides, we can keep track of versioned deploys having the ability to rollback in any moment. Beanstalk also uses the concept of Environments which makes it perfect for a tipical pipeline such as 'development', 'staging', 'production'. These is a simplified version of how this service works.   You can obviously change the architecture configuration at any time and even define with just a few clicks how do you prefer the deploy process to happen. For example if shouldn't have downtime between new releases.  Find more information about Elastic Beanstalk  here", 
            "title": "Amazon Web Services: Elastic Beanstalk"
        }, 
        {
            "location": "/Technologies/AWS/6._EB/#next-steps", 
            "text": "This 5 sections were a very quick introduction to the AWS world. Certainly you'll find a vast amount of services solving the most common (and not so much) problems of software development. The AWS documentation is very detailed and extensive so you'll have more than enough to read about each topic of your interest.  Here  you can found the resource links we choose for you to take a look in a more advanced approach for the things we discussed.", 
            "title": "Next Steps"
        }, 
        {
            "location": "/Technologies/AWS/Resources/", 
            "text": "Amazon Web Services: Other resources\n\n\nWell, we know we promise a list of links that we carefuly select for you, but actually \nhere\n is where you're gonna found everything you need. This repo compress and organize the most complete set of links and resources about AWS. Our list was really cool (you'll never know if that's true) but they did a great job.", 
            "title": "Resources"
        }, 
        {
            "location": "/Technologies/AWS/Resources/#amazon-web-services-other-resources", 
            "text": "Well, we know we promise a list of links that we carefuly select for you, but actually  here  is where you're gonna found everything you need. This repo compress and organize the most complete set of links and resources about AWS. Our list was really cool (you'll never know if that's true) but they did a great job.", 
            "title": "Amazon Web Services: Other resources"
        }, 
        {
            "location": "/Technologies/Android/HockeyApp_Distribution/", 
            "text": "HockeyApp for beta distribution\n\n\nHockeyApp\n is a service provided by Microsoft to help developers manage mobile apps though all phases of developing. It provides features such as:  \nDistribution\n, \nCrash Reports\n, \nFeedback\n and basic \nUser Metrics\n. However, as of today, there are more sophisticated solutions in the market for Crash Reporting (such as \nCrashlytics\n and \nFirebase Crash Reporting\n) and User Metrics (such as \nGoogle Analytics\n and \nFirebase Analytics\n). This article focuses on the distribution feature of HockeyApp.\n\n\nBy using HockeyApp for distribution purposes we can make a beta release available for testers or send demos to clients. It is necessary to mention that as of today, the free version of HockeyApp only allows the management of 10 apps, refer to \npricing\n for more updated information. \n\n\nThis are the steps to follow in order to distribute an app for beta testing. \n\n\n1) \nCreating a HockeyApp account:\n First you need to \nsign up\n to use this service. \n\n\n2) \nCreating a new app in the dashboard:\n This can be done by following this \ntutorial\n. \n\n\n3) \nIntegrating the HockeyApp SDK:\n HockeyApp has SDKs for \nAndroid\n and \niOS\n. Integrating this SDKs in our app allow us to use the following features: \n\n\n\n\nCollect crash reports from the beta testing.\n\n\nIn-app feedback from testers. \n\n\nTrack basic user metrics such as number of users, number of sessions and session times. \n\n\nDisplay an update dialog in the app once a new beta version is released. This allows testers to make an update directly form within the app.\n\n\nForce the authentication of a user through HockeyApp to prevent the usage of the app by non invited users. \n\n\n\n\nIf you add code for using this features after integrating the SDK, it is necessary to make sure this code is not included in the release build of the app. Having this features such as HockeyApp\u00b4s feedback, automatic updates or force authentication in a release build can confuse end users, make them download a beta build that is not ready for release or deny the usage of the app altogether, respectively. For features such as Crash Reporting and User Metrics in a production environment, refer to the other solutions discussed in the beginning of this article. A way of encapsulating this code and use it only in a beta build in Android is configuring a \nbuild type\n or \nproduct flavor\n, as long as the code is not ran in the release build you are good to go. \n\n\nThe integration of this SDK is not necessary if you are not interested in the features exposed above. The app can still be distributed and downloaded using the dashboard and native apps discussed in the next steps. By not using the SDK you will only receive information about the number of Downloads the app has and which user downloaded it, on top of that, there is no update option so the user will need to uninstall the previous build and reinstall the new one. \n\n\n4) \nCreating a new version for the app in the dashboard:\n This can be done using this \ntutorial\n. Subsequent version released can be managed in the same manner. \n\n\n5) \nDownloading the native apps of HockeyApp:\n Android and iOS \nnative apps\n are provided to download and manage beta distributions. This apps will also allow beta testers to download the distribution of new versions of the app. If the SDK is not integrated, there will be no limitation as to who can install and use the beta app once it is downloaded from the HockeyApp native app (this could be achieved with the force authentication feature). Once the app is downloaded and installed you should login with your credentials and see if you can see and download the beta version that you created in the previous step.  \n\n\n6) \nInvite new beta testers:\n This can be done by following this \ntutorial\n. You will usually use the Invite User feature in the dashboard and send an email invitation to the tester / client you want to invite. Once the user accepts the invitation you will be able to manage it by defining which apps he can see, adding him to a team, editing his information or deleting him all together. You can also restrict a version of the app so that just some users can download it. For more information on managing users follow this \nlink\n. \n\n\nAndroid Specific\n\n\nHere is a short guide oriented to Android clients that had not used HockeyApp before:\n\n\n1) Accept the HockeyApp invitation that will arrive to your email address and create a new account.\n2) Download the HockeyApp native app to your device and login with your credentials.\n3) Browser the Android apps and tap \n. If by any chance you can\u00b4t see the app listed, notify us and we can give you permission to see it.\n4) Download the available version of the apk for beta testing and install it.\n\n\nDuring this process you might need to enable the installation of apps from unknown sources. This is necessary because Android by default prevents the installation of apps that doesn\u2019t come from the Google Play Store for security reasons. The location of this setting varies between different device brands but it is usually located in Settings -\n Security -\n Device Administration - \n Unknown sources. Simply enable this option.\n\n\nIf you have not integrated the HockeyApp SDK for update dialogs you might also need to ask the client to uninstall the previous version of the beta app before installing any new version. \n\n\nOther useful links:\n\n\n\n\nHockeyApp Knowledge Base:\n In this link you can find information and guides on pretty much all HockeyApp has to offer, as well as forum discussions of other developers that might have encountered the same problems as you.  \n\n\nHockeyApp Support:\n For asking questions and starting new discussions in their forum if necessary.", 
            "title": "HockeyApp Distribution"
        }, 
        {
            "location": "/Technologies/Android/HockeyApp_Distribution/#hockeyapp-for-beta-distribution", 
            "text": "HockeyApp  is a service provided by Microsoft to help developers manage mobile apps though all phases of developing. It provides features such as:   Distribution ,  Crash Reports ,  Feedback  and basic  User Metrics . However, as of today, there are more sophisticated solutions in the market for Crash Reporting (such as  Crashlytics  and  Firebase Crash Reporting ) and User Metrics (such as  Google Analytics  and  Firebase Analytics ). This article focuses on the distribution feature of HockeyApp.  By using HockeyApp for distribution purposes we can make a beta release available for testers or send demos to clients. It is necessary to mention that as of today, the free version of HockeyApp only allows the management of 10 apps, refer to  pricing  for more updated information.   This are the steps to follow in order to distribute an app for beta testing.   1)  Creating a HockeyApp account:  First you need to  sign up  to use this service.   2)  Creating a new app in the dashboard:  This can be done by following this  tutorial .   3)  Integrating the HockeyApp SDK:  HockeyApp has SDKs for  Android  and  iOS . Integrating this SDKs in our app allow us to use the following features:    Collect crash reports from the beta testing.  In-app feedback from testers.   Track basic user metrics such as number of users, number of sessions and session times.   Display an update dialog in the app once a new beta version is released. This allows testers to make an update directly form within the app.  Force the authentication of a user through HockeyApp to prevent the usage of the app by non invited users.    If you add code for using this features after integrating the SDK, it is necessary to make sure this code is not included in the release build of the app. Having this features such as HockeyApp\u00b4s feedback, automatic updates or force authentication in a release build can confuse end users, make them download a beta build that is not ready for release or deny the usage of the app altogether, respectively. For features such as Crash Reporting and User Metrics in a production environment, refer to the other solutions discussed in the beginning of this article. A way of encapsulating this code and use it only in a beta build in Android is configuring a  build type  or  product flavor , as long as the code is not ran in the release build you are good to go.   The integration of this SDK is not necessary if you are not interested in the features exposed above. The app can still be distributed and downloaded using the dashboard and native apps discussed in the next steps. By not using the SDK you will only receive information about the number of Downloads the app has and which user downloaded it, on top of that, there is no update option so the user will need to uninstall the previous build and reinstall the new one.   4)  Creating a new version for the app in the dashboard:  This can be done using this  tutorial . Subsequent version released can be managed in the same manner.   5)  Downloading the native apps of HockeyApp:  Android and iOS  native apps  are provided to download and manage beta distributions. This apps will also allow beta testers to download the distribution of new versions of the app. If the SDK is not integrated, there will be no limitation as to who can install and use the beta app once it is downloaded from the HockeyApp native app (this could be achieved with the force authentication feature). Once the app is downloaded and installed you should login with your credentials and see if you can see and download the beta version that you created in the previous step.    6)  Invite new beta testers:  This can be done by following this  tutorial . You will usually use the Invite User feature in the dashboard and send an email invitation to the tester / client you want to invite. Once the user accepts the invitation you will be able to manage it by defining which apps he can see, adding him to a team, editing his information or deleting him all together. You can also restrict a version of the app so that just some users can download it. For more information on managing users follow this  link .", 
            "title": "HockeyApp for beta distribution"
        }, 
        {
            "location": "/Technologies/Android/HockeyApp_Distribution/#android-specific", 
            "text": "Here is a short guide oriented to Android clients that had not used HockeyApp before:  1) Accept the HockeyApp invitation that will arrive to your email address and create a new account.\n2) Download the HockeyApp native app to your device and login with your credentials.\n3) Browser the Android apps and tap  . If by any chance you can\u00b4t see the app listed, notify us and we can give you permission to see it.\n4) Download the available version of the apk for beta testing and install it.  During this process you might need to enable the installation of apps from unknown sources. This is necessary because Android by default prevents the installation of apps that doesn\u2019t come from the Google Play Store for security reasons. The location of this setting varies between different device brands but it is usually located in Settings -  Security -  Device Administration -   Unknown sources. Simply enable this option.  If you have not integrated the HockeyApp SDK for update dialogs you might also need to ask the client to uninstall the previous version of the beta app before installing any new version.", 
            "title": "Android Specific"
        }, 
        {
            "location": "/Technologies/Android/HockeyApp_Distribution/#other-useful-links", 
            "text": "HockeyApp Knowledge Base:  In this link you can find information and guides on pretty much all HockeyApp has to offer, as well as forum discussions of other developers that might have encountered the same problems as you.    HockeyApp Support:  For asking questions and starting new discussions in their forum if necessary.", 
            "title": "Other useful links:"
        }, 
        {
            "location": "/Technologies/React/1._Getting_Started/", 
            "text": "Getting started with the React ecosystem\n\n\nThis list of links is intended to be followed in order, and assumes a basic knowledge of JavaScript.\n\n\n\nIt is recommended NOT TO SKIP any of the links of this page.\n\n\nCommand line improvements\n\n\nBecause React makes extensive use of the command line, this gist describes several improvements to iTerm to have a better experience when using it.\n\n\n\nhttps://gist.github.com/kevin-smets/8568070\n\n\nJavascript new features\n\n\nJavascript ES6 Cheatsheet - the best of JS ES6\n\n\n\n\nJavascript ES6 Cheatsheet #2 - the best of JS ES6\n\n\n\n\nReact\n\n\nThis Codecademy React Courses include exercises and explain the basics of React.\nThey are probably the most important links in this page.\n\n\nReact 101\n\n\n\n\nReact 102\n\n\nRedux tutorials\n\n\nRedux is an easy and powerful way of managing the state application.\n\n\nIt is important to follow the whole playlist, as it explains fundamental concepts of Redux\n\n\n\nRedux Tutorials\n\n\nImmutable JS\n\n\nThis is a tutorial of a great library for simplifying the logic inside reducers\n\n\n\nImmutable.js 101 \u2013 Maps and Lists\n\n\nSagas\n\n\nSagas is a great way of structuring the behavior of an app. It is extremely useful for handling async operations.\nBefore using it, there are some key concepts that are useful to learn\n\n\n\n\nJavascript Generators - THEY CHANGE EVERYTHING - ES6 Generators Harmony Generators\n\n\n\n\n\n\nAre you bad, good, better or best with Async JS? JS Tutorial: Callbacks, Promises, Generators\n\n\n\n\n\n\nThis is a short article that explains the case for using Sagas, and explains how to use it in a simple way. It is probably the most important Sagas tutorial in this page.\n\n\n\nUsing redux-saga To Simplify Your Growing React Native Codebase\n\n\n\n\n\nAn excellent tutorial on how to use Sagas for forking operations\n\n\n\nAsync operations using redux-saga\n\n\n\n\n\nThis is the Beginner Tutorial of the official documentation. There are more sections available to read, but they are not vital for Sagas development\n\n\n\nBeginner Tutorial\n\n\nUsing everything in a practical example\n\n\nThis tutorial creates a ToDo app using several of the libraries described before.\n\n\n\nHow to Build a Todo App Using React, Redux, and Immutable.js\n\n\nReselect\n\n\nReselect is a library for improving the performance when components query data from the state. It can make apps dramatically faster.\n\n\n\n\n\n\n\n\n* \nComputing Derived Data\n: This section of the redux tutorial explains how to use reselect with react.\n\n\nSass\n\n\nSass is a modern and powerful way of managing the styling of components.\n\n\n\nIntro to Sass | SCSS101\n\n\nBoilerplates\n\n\nSee the \nBoilerplate\n section of this KB\n\n\nOther tutorials guides\n\n\nStart here: \nYour guide to the (sometimes overwhelming!) React ecosystem.\n\n\n\n\nDan Abramov (creator of Redux and React Hot Loader) tutorials\n: Redux core concepts, and advanced topics.", 
            "title": "1. Getting Started"
        }, 
        {
            "location": "/Technologies/React/1._Getting_Started/#getting-started-with-the-react-ecosystem", 
            "text": "This list of links is intended to be followed in order, and assumes a basic knowledge of JavaScript.  It is recommended NOT TO SKIP any of the links of this page.", 
            "title": "Getting started with the React ecosystem"
        }, 
        {
            "location": "/Technologies/React/1._Getting_Started/#command-line-improvements", 
            "text": "Because React makes extensive use of the command line, this gist describes several improvements to iTerm to have a better experience when using it.  https://gist.github.com/kevin-smets/8568070", 
            "title": "Command line improvements"
        }, 
        {
            "location": "/Technologies/React/1._Getting_Started/#javascript-new-features", 
            "text": "", 
            "title": "Javascript new features"
        }, 
        {
            "location": "/Technologies/React/1._Getting_Started/#javascript-es6-cheatsheet-the-best-of-js-es6", 
            "text": "", 
            "title": "Javascript ES6 Cheatsheet - the best of JS ES6"
        }, 
        {
            "location": "/Technologies/React/1._Getting_Started/#javascript-es6-cheatsheet-2-the-best-of-js-es6", 
            "text": "", 
            "title": "Javascript ES6 Cheatsheet #2 - the best of JS ES6"
        }, 
        {
            "location": "/Technologies/React/1._Getting_Started/#react", 
            "text": "This Codecademy React Courses include exercises and explain the basics of React.\nThey are probably the most important links in this page.  React 101   React 102", 
            "title": "React"
        }, 
        {
            "location": "/Technologies/React/1._Getting_Started/#redux-tutorials", 
            "text": "Redux is an easy and powerful way of managing the state application. \nIt is important to follow the whole playlist, as it explains fundamental concepts of Redux  Redux Tutorials", 
            "title": "Redux tutorials"
        }, 
        {
            "location": "/Technologies/React/1._Getting_Started/#immutable-js", 
            "text": "This is a tutorial of a great library for simplifying the logic inside reducers  Immutable.js 101 \u2013 Maps and Lists", 
            "title": "Immutable JS"
        }, 
        {
            "location": "/Technologies/React/1._Getting_Started/#sagas", 
            "text": "Sagas is a great way of structuring the behavior of an app. It is extremely useful for handling async operations.\nBefore using it, there are some key concepts that are useful to learn  \nJavascript Generators - THEY CHANGE EVERYTHING - ES6 Generators Harmony Generators   \nAre you bad, good, better or best with Async JS? JS Tutorial: Callbacks, Promises, Generators   \nThis is a short article that explains the case for using Sagas, and explains how to use it in a simple way. It is probably the most important Sagas tutorial in this page.  Using redux-saga To Simplify Your Growing React Native Codebase   \nAn excellent tutorial on how to use Sagas for forking operations  Async operations using redux-saga   \nThis is the Beginner Tutorial of the official documentation. There are more sections available to read, but they are not vital for Sagas development  Beginner Tutorial", 
            "title": "Sagas"
        }, 
        {
            "location": "/Technologies/React/1._Getting_Started/#using-everything-in-a-practical-example", 
            "text": "This tutorial creates a ToDo app using several of the libraries described before.  How to Build a Todo App Using React, Redux, and Immutable.js", 
            "title": "Using everything in a practical example"
        }, 
        {
            "location": "/Technologies/React/1._Getting_Started/#reselect", 
            "text": "Reselect is a library for improving the performance when components query data from the state. It can make apps dramatically faster.    \n*  Computing Derived Data : This section of the redux tutorial explains how to use reselect with react.", 
            "title": "Reselect"
        }, 
        {
            "location": "/Technologies/React/1._Getting_Started/#sass", 
            "text": "Sass is a modern and powerful way of managing the styling of components.  Intro to Sass | SCSS101", 
            "title": "Sass"
        }, 
        {
            "location": "/Technologies/React/1._Getting_Started/#boilerplates", 
            "text": "See the  Boilerplate  section of this KB", 
            "title": "Boilerplates"
        }, 
        {
            "location": "/Technologies/React/1._Getting_Started/#other-tutorials-guides", 
            "text": "Start here:  Your guide to the (sometimes overwhelming!) React ecosystem.   Dan Abramov (creator of Redux and React Hot Loader) tutorials : Redux core concepts, and advanced topics.", 
            "title": "Other tutorials guides"
        }, 
        {
            "location": "/Technologies/React/2._Project_Boilerplate/", 
            "text": "React Projects Boilerplate\n\n\nIntroduction\n\n\nThe objective is to standardize React projects, so that:\n\n\n\n\nLess decisions need to be made when starging a project\n\n\nWe have a scalable architecture\n\n\nDevelopers get proficient with the architecture, libraries and other tools commonly used with React\n\n\n\n\nReact Boilerplate\n\n\nWhile we believe that \ncreate-react-app\n is a great tool, it leaves undefined a large number of decisions that are necessary to take at the beginning of the project. Our goal is to minimize the divergence of tools and libraries used in different projects, so as to maximize the learning and productivity of the developers when starting or joining React project at Codigo del Sur. With this in mind, we decided to leverage [React-Boilerplate] (https://github.com/react-boilerplate/react-boilerplate), which comes with a defined library stack.\n\n\nReact Boilerplate is production-ready and not meant for beginners. If you're just starting out with react or redux, please refer to the \nGetting Starter\n guide.\n\n\nReact Boilerplate supports \nStructor\n.\n\n\nImportant:\n \nRead this\n\n\nPluralsight course:\n\n\nhttps://app.pluralsight.com/library/courses/react-boilerplate-building-scalable-apps/table-of-contents\n\n\nTech Stack\n\n\nThis boilerplate manages application state using Redux, makes it immutable with ImmutableJS and keeps access performant via reselect.\n\n\nFor managing asynchronous flows (e.g. logging in) we use redux-saga.\n\n\nFor routing, we use react-router in combination with react-router-redux.\n\n\nWe include a generator for components, containers, sagas, routes and selectors. Run npm run generate to choose from the available generators, and automatically add new parts of your application!\n\n\nCore\n\n\n\n\nReact\n\n\nReact Router\n\n\nRedux\n\n\nRedux Saga\n\n\nReselect\n\n\nImmutableJS\n\n\nStyled Components\n\n\n\n\nUnit Testing\n\n\n\n\nJest\n\n\nEnzyme\n\n\n\n\nLinting\n\n\n\n\nESLint\n\n\nPrettier: As of today the boilerplate does not come with Prettier configured (\nsee this issue\n). \n\n\n\n\nNote that while react-boilerplate includes a lot of features, many of them are optional and you can find instructions in the docs on how to remove...\n\n\n...redux-saga or reselect.\n...offline-first, add to homescreen, performant web font loading and image optimisation\nsanitize.css\ni18n (i.e. react-intl)\n\n\nProject Structure\n\n\nYou will write your app in the app folder. This is the folder you will spend most, if not all, of your time in.\nConfiguration, generators and templates are in the internals folder.\nThe server folder contains development and production server configuration files.\n\n\n\n\nArchitecture\n\n\n\n\n\nComponents and containers: we adopted a split between stateless, reusable components called components and stateful parent components called containers.  See \nthis blogpost by the creator of Redux\n\n\nGroup by filters instead of by type:\n\n\n\n\nTesting\n\n\nThe boilerplate comes with Jest and Enzyme. Please refer to \nthe documentation\n.\nEvery project must have at least basic tests to make sure that important features work as expected.", 
            "title": "2. Project Boilerplate"
        }, 
        {
            "location": "/Technologies/React/2._Project_Boilerplate/#react-projects-boilerplate", 
            "text": "", 
            "title": "React Projects Boilerplate"
        }, 
        {
            "location": "/Technologies/React/2._Project_Boilerplate/#introduction", 
            "text": "The objective is to standardize React projects, so that:   Less decisions need to be made when starging a project  We have a scalable architecture  Developers get proficient with the architecture, libraries and other tools commonly used with React", 
            "title": "Introduction"
        }, 
        {
            "location": "/Technologies/React/2._Project_Boilerplate/#react-boilerplate", 
            "text": "While we believe that  create-react-app  is a great tool, it leaves undefined a large number of decisions that are necessary to take at the beginning of the project. Our goal is to minimize the divergence of tools and libraries used in different projects, so as to maximize the learning and productivity of the developers when starting or joining React project at Codigo del Sur. With this in mind, we decided to leverage [React-Boilerplate] (https://github.com/react-boilerplate/react-boilerplate), which comes with a defined library stack.  React Boilerplate is production-ready and not meant for beginners. If you're just starting out with react or redux, please refer to the  Getting Starter  guide.  React Boilerplate supports  Structor .  Important:   Read this", 
            "title": "React Boilerplate"
        }, 
        {
            "location": "/Technologies/React/2._Project_Boilerplate/#pluralsight-course", 
            "text": "https://app.pluralsight.com/library/courses/react-boilerplate-building-scalable-apps/table-of-contents", 
            "title": "Pluralsight course:"
        }, 
        {
            "location": "/Technologies/React/2._Project_Boilerplate/#tech-stack", 
            "text": "This boilerplate manages application state using Redux, makes it immutable with ImmutableJS and keeps access performant via reselect.  For managing asynchronous flows (e.g. logging in) we use redux-saga.  For routing, we use react-router in combination with react-router-redux.  We include a generator for components, containers, sagas, routes and selectors. Run npm run generate to choose from the available generators, and automatically add new parts of your application!", 
            "title": "Tech Stack"
        }, 
        {
            "location": "/Technologies/React/2._Project_Boilerplate/#core", 
            "text": "React  React Router  Redux  Redux Saga  Reselect  ImmutableJS  Styled Components", 
            "title": "Core"
        }, 
        {
            "location": "/Technologies/React/2._Project_Boilerplate/#unit-testing", 
            "text": "Jest  Enzyme", 
            "title": "Unit Testing"
        }, 
        {
            "location": "/Technologies/React/2._Project_Boilerplate/#linting", 
            "text": "ESLint  Prettier: As of today the boilerplate does not come with Prettier configured ( see this issue ).    Note that while react-boilerplate includes a lot of features, many of them are optional and you can find instructions in the docs on how to remove...  ...redux-saga or reselect.\n...offline-first, add to homescreen, performant web font loading and image optimisation\nsanitize.css\ni18n (i.e. react-intl)", 
            "title": "Linting"
        }, 
        {
            "location": "/Technologies/React/2._Project_Boilerplate/#project-structure", 
            "text": "You will write your app in the app folder. This is the folder you will spend most, if not all, of your time in.\nConfiguration, generators and templates are in the internals folder.\nThe server folder contains development and production server configuration files.", 
            "title": "Project Structure"
        }, 
        {
            "location": "/Technologies/React/2._Project_Boilerplate/#architecture", 
            "text": "Components and containers: we adopted a split between stateless, reusable components called components and stateful parent components called containers.  See  this blogpost by the creator of Redux  Group by filters instead of by type:", 
            "title": "Architecture"
        }, 
        {
            "location": "/Technologies/React/2._Project_Boilerplate/#testing", 
            "text": "The boilerplate comes with Jest and Enzyme. Please refer to  the documentation .\nEvery project must have at least basic tests to make sure that important features work as expected.", 
            "title": "Testing"
        }, 
        {
            "location": "/Technologies/React/3._Libraries/", 
            "text": "Useful libraries\n\n\nCommon libraries to use with React\n\n\n\n\nreact-redux\n: Redux is a predictable state container for JavaScript apps.\n\n\nImmutableJS\n: Immutable persistent data collections for Javascript which increase efficiency and simplicity.\n\n\nredux-orm\n: If the redux state becomes complex, this library creates an ORM on it. This allows for easier querying and modification of the state structure (while maintaining immutability).\n\n\nredux-saga\n: redux-saga is a library that aims to make side effects (i.e. asynchronous things like data fetching and impure things like accessing the browser cache) in React/Redux applications easier and better.\n\n\nreselect\n: Reselect is a simple library for creating memoized, composable selector functions. Reselect selectors can be used to efficiently compute derived data from the Redux store.\n\n\nMobX\n: Simple, scalable state management. It's an alternative to react-redux.\n\n\nReact-Bootstrap\n: React-Bootstrap is a complete re-implementation of the Bootstrap components using React.\n\n\n\n\nUI Libraries\n\n\n\n\nReactCSSTransitionGroup\n: For animating items. Defining initial and final state, this library animates the frames between them.\n\n\n\n\nDevelopment\n\n\n\n\nRedux Async Initial State\n: Redux middleware for async loading of initial app state.\n\n\nWhy did you update\n: Tool that will output a warning every time a component is updated and the state didn't change.\n\n\nStructor\n: Generate the source code for components, containers, actions, reducers, selectors and sagas. Amazing.\n\n\nredux-query\n: redux-query is a library for querying and managing network state in React/Redux applications.\n\n\n\n\nBoilerplates\n\n\n\n\nCreate React App (CRA)\n\n\nReact Boilerplate\n.\n\n\n\n\nUtilities\n\n\n\n\nfaker.js\n: Generate massive amounts of fake data in the browser and node.js. (Warning: there's a duplicate of this repository with the same name that's not mantained. Only use the one in this link)\n\n\nfake-json-stream\n: Make Faker return json data. Useful for creating fake APIs.\n\n\nmockable.io\n: Tool for creating and publishing fake APIs.\n\n\nReact Developer Tools\n:React Developer Tools for Chrome. Useful for debugging.\n\n\nRedux DevTools\n:Redux DevTools for Chrome.\n\n\n\n\nContinuous Integration\n\n\n\n\nCircleCI\n: The modern continuous integration and delivery platform that software teams love to use.\n\n\n\n\nHeroku\n\n\n\n\nHeroku\n: CDN to host React apps. Allows to create a pipeline with different environments. Also integrates with git for automatically deploying pull request apps. All this features are included in the free plan.\n\n\nDeploying React with Zero Configuration\n: Article that explains how to deploy a create-react-app (CRA) to Heroku\n\n\n\n\nIDEs\n\n\nAtom\n\n\n\n\nAtom\n: Atom is a text editor that's modern, approachable, yet hackable to the core\u2014a tool you can customize to do anything but also use productively without ever touching a config file.\n\n\n\n\n\nAtom plugins\n\n\n\n\nReact\n: React.js (JSX) language support, indentation, snippets, auto completion, reformatting. \nEssential\n\n\nfile-icons\n: Add file icons to project tree\n\n\nhighlight-selected\n: Highlight selected text in other parts of the file\n\n\nlinter\n: Linter is a base linter provider for the Hackable Atom Editor.\n\n\nlinter-eslint\n: This linter plugin for Linter provides an interface to eslint. It will be used with files that have the \"JavaScript\" syntax.\n\n\nminimap\n: A preview of the full source code.\n\n\nminimap-hide\n: Hide the minimap when pane isn't focus\n\n\nopen-recent\n: Open recent files in the current window, and recent folders (optionally) in a new window.\n\n\nzentabs\n: Keep the opened tabs amount below specified limit\n\n\njs-hyperclick\n: A hyperclick provider that lets you jump to where variables are defined.\n\n\nsync-settings\n: Synchronize settings, keymaps, user styles, init script, snippets and installed packages across Atom instances.\n\n\ngit-time-machine\n: Visually interact with git commit history for a file instances.\n\n\n\n\nNuclide\n\n\n\n\nNuclide\n: Nuclide is built as a single package on top of Atom to provide hackability and the support of an active community. It provides a first-class development environment for React Native, Hack and Flow projects. It is made by Facebook and has incredible features (debugging, remote development, etc).\n\n\n\n\nAdditional links:\n\n\n\n\nA collection of awesome things regarding React ecosystem.\n\n\nYet another collection of awesome React Components \n Libraries.", 
            "title": "3. Libraries"
        }, 
        {
            "location": "/Technologies/React/3._Libraries/#useful-libraries", 
            "text": "", 
            "title": "Useful libraries"
        }, 
        {
            "location": "/Technologies/React/3._Libraries/#common-libraries-to-use-with-react", 
            "text": "react-redux : Redux is a predictable state container for JavaScript apps.  ImmutableJS : Immutable persistent data collections for Javascript which increase efficiency and simplicity.  redux-orm : If the redux state becomes complex, this library creates an ORM on it. This allows for easier querying and modification of the state structure (while maintaining immutability).  redux-saga : redux-saga is a library that aims to make side effects (i.e. asynchronous things like data fetching and impure things like accessing the browser cache) in React/Redux applications easier and better.  reselect : Reselect is a simple library for creating memoized, composable selector functions. Reselect selectors can be used to efficiently compute derived data from the Redux store.  MobX : Simple, scalable state management. It's an alternative to react-redux.  React-Bootstrap : React-Bootstrap is a complete re-implementation of the Bootstrap components using React.", 
            "title": "Common libraries to use with React"
        }, 
        {
            "location": "/Technologies/React/3._Libraries/#ui-libraries", 
            "text": "ReactCSSTransitionGroup : For animating items. Defining initial and final state, this library animates the frames between them.", 
            "title": "UI Libraries"
        }, 
        {
            "location": "/Technologies/React/3._Libraries/#development", 
            "text": "Redux Async Initial State : Redux middleware for async loading of initial app state.  Why did you update : Tool that will output a warning every time a component is updated and the state didn't change.  Structor : Generate the source code for components, containers, actions, reducers, selectors and sagas. Amazing.  redux-query : redux-query is a library for querying and managing network state in React/Redux applications.", 
            "title": "Development"
        }, 
        {
            "location": "/Technologies/React/3._Libraries/#boilerplates", 
            "text": "Create React App (CRA)  React Boilerplate .", 
            "title": "Boilerplates"
        }, 
        {
            "location": "/Technologies/React/3._Libraries/#utilities", 
            "text": "faker.js : Generate massive amounts of fake data in the browser and node.js. (Warning: there's a duplicate of this repository with the same name that's not mantained. Only use the one in this link)  fake-json-stream : Make Faker return json data. Useful for creating fake APIs.  mockable.io : Tool for creating and publishing fake APIs.  React Developer Tools :React Developer Tools for Chrome. Useful for debugging.  Redux DevTools :Redux DevTools for Chrome.", 
            "title": "Utilities"
        }, 
        {
            "location": "/Technologies/React/3._Libraries/#continuous-integration", 
            "text": "CircleCI : The modern continuous integration and delivery platform that software teams love to use.", 
            "title": "Continuous Integration"
        }, 
        {
            "location": "/Technologies/React/3._Libraries/#heroku", 
            "text": "Heroku : CDN to host React apps. Allows to create a pipeline with different environments. Also integrates with git for automatically deploying pull request apps. All this features are included in the free plan.  Deploying React with Zero Configuration : Article that explains how to deploy a create-react-app (CRA) to Heroku", 
            "title": "Heroku"
        }, 
        {
            "location": "/Technologies/React/3._Libraries/#ides", 
            "text": "", 
            "title": "IDEs"
        }, 
        {
            "location": "/Technologies/React/3._Libraries/#atom", 
            "text": "Atom : Atom is a text editor that's modern, approachable, yet hackable to the core\u2014a tool you can customize to do anything but also use productively without ever touching a config file.", 
            "title": "Atom"
        }, 
        {
            "location": "/Technologies/React/3._Libraries/#atom-plugins", 
            "text": "React : React.js (JSX) language support, indentation, snippets, auto completion, reformatting.  Essential  file-icons : Add file icons to project tree  highlight-selected : Highlight selected text in other parts of the file  linter : Linter is a base linter provider for the Hackable Atom Editor.  linter-eslint : This linter plugin for Linter provides an interface to eslint. It will be used with files that have the \"JavaScript\" syntax.  minimap : A preview of the full source code.  minimap-hide : Hide the minimap when pane isn't focus  open-recent : Open recent files in the current window, and recent folders (optionally) in a new window.  zentabs : Keep the opened tabs amount below specified limit  js-hyperclick : A hyperclick provider that lets you jump to where variables are defined.  sync-settings : Synchronize settings, keymaps, user styles, init script, snippets and installed packages across Atom instances.  git-time-machine : Visually interact with git commit history for a file instances.", 
            "title": "Atom plugins"
        }, 
        {
            "location": "/Technologies/React/3._Libraries/#nuclide", 
            "text": "Nuclide : Nuclide is built as a single package on top of Atom to provide hackability and the support of an active community. It provides a first-class development environment for React Native, Hack and Flow projects. It is made by Facebook and has incredible features (debugging, remote development, etc).", 
            "title": "Nuclide"
        }, 
        {
            "location": "/Technologies/React/3._Libraries/#additional-links", 
            "text": "A collection of awesome things regarding React ecosystem.  Yet another collection of awesome React Components   Libraries.", 
            "title": "Additional links:"
        }, 
        {
            "location": "/Technologies/React/4._Redux/", 
            "text": "Tips\n\n\nIt is important that the structure of the Redux state be designed in a way that facilitates the use and access to data from the different parts of the UI.\nPlease carefully study the official documentation regading \nreducer structure\n, in particular the chapter about \nDesigning a Normalized State\n\n\nExplanation (?)", 
            "title": "4. Redux"
        }, 
        {
            "location": "/Technologies/React/4._Redux/#tips", 
            "text": "It is important that the structure of the Redux state be designed in a way that facilitates the use and access to data from the different parts of the UI.\nPlease carefully study the official documentation regading  reducer structure , in particular the chapter about  Designing a Normalized State", 
            "title": "Tips"
        }, 
        {
            "location": "/Technologies/React/4._Redux/#explanation", 
            "text": "", 
            "title": "Explanation (?)"
        }, 
        {
            "location": "/Technologies/React/5._Testing/", 
            "text": "Frontend testing with React and Redux\n\n\nComponent testing with Enzyme\n\n\ncomponent testing\n\n\nSnapshot testing\n\n\nSnapshot testing React components with Jest\n\n\nLinks\n\n\nUsing tests to drive out the functionality of the app", 
            "title": "5. Testing"
        }, 
        {
            "location": "/Technologies/React/5._Testing/#frontend-testing-with-react-and-redux", 
            "text": "", 
            "title": "Frontend testing with React and Redux"
        }, 
        {
            "location": "/Technologies/React/5._Testing/#component-testing-with-enzyme", 
            "text": "component testing", 
            "title": "Component testing with Enzyme"
        }, 
        {
            "location": "/Technologies/React/5._Testing/#snapshot-testing", 
            "text": "Snapshot testing React components with Jest", 
            "title": "Snapshot testing"
        }, 
        {
            "location": "/Technologies/React/5._Testing/#links", 
            "text": "Using tests to drive out the functionality of the app", 
            "title": "Links"
        }, 
        {
            "location": "/Technologies/React/6._Recommended_reading/", 
            "text": "We strongly suggest reading the following articles\n\n\n\n\nUnderstanding React\u200a\u2014\u200aComponent life-cycle\n  \nImportant\n\n\n7 architectural attributes of a reliable React component\n\n\n8 things to learn in React before using Redux\n\n\nWriting Scalable React Apps with the Component Folder Pattern", 
            "title": "6. Recommended reading"
        }, 
        {
            "location": "/Technologies/React/6._Recommended_reading/#we-strongly-suggest-reading-the-following-articles", 
            "text": "Understanding React\u200a\u2014\u200aComponent life-cycle    Important  7 architectural attributes of a reliable React component  8 things to learn in React before using Redux  Writing Scalable React Apps with the Component Folder Pattern", 
            "title": "We strongly suggest reading the following articles"
        }, 
        {
            "location": "/Technologies/Ruby_&_Rails/1._Ruby_Beginners_Guide/", 
            "text": "CodigoDelSur's beginners guide to Ruby.\n\n\nIf you have already worked or experienced with \nObject Oriented Programming\n and decided it was time to add Ruby to your portfolio, then this guide is for you.\nIn here you will find links to useful tutorials about Ruby, what it is and how it works.\n\n\nIn behalf of the CodigoDelSur staff we like to wish you a nice journey into the world of Ruby.\n\n\nFirst steps\n\n\nHere\n you will find the basic concepts of Ruby, the very first step in your journey to becoming an almighty Ruby developer.\n\n\nFor another quick jump, you may also find interesting \nthis\n site which allows you to play around with the first set of instructions for the Ruby language.\n\n\nTo keep pace, you can also check out \nthis\n tutorial for a more detailed introduction on the most important topics and concepts.\n\n\nGoing further\n\n\nYou probably feel more comfortable by learning something new with some type of material more than others and this shouldn't be the exception. We encourage you to take the route that fits better this training stage. Below you'll find links to the different resources that we have selected for you.\n\n\nRecommended Books\n\n\n\n\nLearn Ruby the hard way\n by Zed A. Shaw and Rob Sobers\n\n\nThe Ruby programming language\n by Yukihiro Matsumoto\n\n\n\n\nBegginers Ruby Docs - Tutorials\n\n\n\n\nRuby Codecademy\n\n\nOfficial Ruby documentation\n\n\n10 mins to your first Ruby app\n\n\nThe bastards book of Ruby\n\n\n\n\nBegginers Ruby docs - Videos resources\n\n\n\n\nRuby Programming\n\n\nRuby Programming series\n\n\n\n\nWhat's next\n\n\nOnce the basic Ruby concepts are clear for you and feel ready to move on, the next step is to jump to the Rails world. See you \nthere\n!", 
            "title": "1. Ruby Beginners Guide"
        }, 
        {
            "location": "/Technologies/Ruby_&_Rails/1._Ruby_Beginners_Guide/#codigodelsurs-beginners-guide-to-ruby", 
            "text": "If you have already worked or experienced with  Object Oriented Programming  and decided it was time to add Ruby to your portfolio, then this guide is for you.\nIn here you will find links to useful tutorials about Ruby, what it is and how it works.  In behalf of the CodigoDelSur staff we like to wish you a nice journey into the world of Ruby.", 
            "title": "CodigoDelSur's beginners guide to Ruby."
        }, 
        {
            "location": "/Technologies/Ruby_&_Rails/1._Ruby_Beginners_Guide/#first-steps", 
            "text": "Here  you will find the basic concepts of Ruby, the very first step in your journey to becoming an almighty Ruby developer.  For another quick jump, you may also find interesting  this  site which allows you to play around with the first set of instructions for the Ruby language.  To keep pace, you can also check out  this  tutorial for a more detailed introduction on the most important topics and concepts.", 
            "title": "First steps"
        }, 
        {
            "location": "/Technologies/Ruby_&_Rails/1._Ruby_Beginners_Guide/#going-further", 
            "text": "You probably feel more comfortable by learning something new with some type of material more than others and this shouldn't be the exception. We encourage you to take the route that fits better this training stage. Below you'll find links to the different resources that we have selected for you.", 
            "title": "Going further"
        }, 
        {
            "location": "/Technologies/Ruby_&_Rails/1._Ruby_Beginners_Guide/#recommended-books", 
            "text": "Learn Ruby the hard way  by Zed A. Shaw and Rob Sobers  The Ruby programming language  by Yukihiro Matsumoto", 
            "title": "Recommended Books"
        }, 
        {
            "location": "/Technologies/Ruby_&_Rails/1._Ruby_Beginners_Guide/#begginers-ruby-docs-tutorials", 
            "text": "Ruby Codecademy  Official Ruby documentation  10 mins to your first Ruby app  The bastards book of Ruby", 
            "title": "Begginers Ruby Docs - Tutorials"
        }, 
        {
            "location": "/Technologies/Ruby_&_Rails/1._Ruby_Beginners_Guide/#begginers-ruby-docs-videos-resources", 
            "text": "Ruby Programming  Ruby Programming series", 
            "title": "Begginers Ruby docs - Videos resources"
        }, 
        {
            "location": "/Technologies/Ruby_&_Rails/1._Ruby_Beginners_Guide/#whats-next", 
            "text": "Once the basic Ruby concepts are clear for you and feel ready to move on, the next step is to jump to the Rails world. See you  there !", 
            "title": "What's next"
        }, 
        {
            "location": "/Technologies/Ruby_&_Rails/2._Rails_Beginners_Guide/", 
            "text": "CodigoDelSur's beginners guide to Rails.\n\n\nAfter dealing with the first Ruby concepts it's time to move on to the real world and start building full stack applications. The next challenge is to learn Rails. As you probably have heard this framework is combined with the Ruby language to build powerful software. Below you will find links to useful tutorials about Rails, what it is and how it works.\n\n\nFirst steps\n\n\nHere\n you will find the official rails guide for developers showing the basic concepts of Rails from the practice.\n\n\nFor a more extended reading on the Ruby on Rails web development in practice have a look to \nthis\n online book.\n\n\nRuby on Rails works great for full stack web applications but is also great at biulding REST APIs. Check out \nthis\n tutorial book for a very detailed explanation on this topic.\n\n\nGoing further\n\n\nYou probably feel more comfortable by learning something new with some type of material more than others and this shouldn't be the exception. We encourage you to take the route that fits better this training stage. Below you'll find links to the different resources that we have selected for you.\n\n\nRecommended Books\n\n\n\n\nJump Start Rails\n by Andy Hawthorne\n\n\nRails 4 in action\n by Ryan Bigg, Yehuda Katz, Steve Klabnik, and Rebecca Skinner\n\n\n\n\nBegginers Rails Docs - Tutorials\n\n\n\n\nCodecademy learn rails\n\n\nRailscasts tutorials\n\n\nLearning Rails (Medium post)\n\n\nRails best practices\n\n\n\n\nBeginners Rails Docs - Videos\n\n\n\n\nRails tutorial\n\n\nLearn Ruby on Rails from scratch\n\n\n\n\nWhat's next\n\n\nOnce the basic Ruby on Rails concepts are clear for you and feel ready to move on, the next step is to jump to the intermediate guide. See you \nthere\n!", 
            "title": "2. Rails Beginners Guide"
        }, 
        {
            "location": "/Technologies/Ruby_&_Rails/2._Rails_Beginners_Guide/#codigodelsurs-beginners-guide-to-rails", 
            "text": "After dealing with the first Ruby concepts it's time to move on to the real world and start building full stack applications. The next challenge is to learn Rails. As you probably have heard this framework is combined with the Ruby language to build powerful software. Below you will find links to useful tutorials about Rails, what it is and how it works.", 
            "title": "CodigoDelSur's beginners guide to Rails."
        }, 
        {
            "location": "/Technologies/Ruby_&_Rails/2._Rails_Beginners_Guide/#first-steps", 
            "text": "Here  you will find the official rails guide for developers showing the basic concepts of Rails from the practice.  For a more extended reading on the Ruby on Rails web development in practice have a look to  this  online book.  Ruby on Rails works great for full stack web applications but is also great at biulding REST APIs. Check out  this  tutorial book for a very detailed explanation on this topic.", 
            "title": "First steps"
        }, 
        {
            "location": "/Technologies/Ruby_&_Rails/2._Rails_Beginners_Guide/#going-further", 
            "text": "You probably feel more comfortable by learning something new with some type of material more than others and this shouldn't be the exception. We encourage you to take the route that fits better this training stage. Below you'll find links to the different resources that we have selected for you.", 
            "title": "Going further"
        }, 
        {
            "location": "/Technologies/Ruby_&_Rails/2._Rails_Beginners_Guide/#recommended-books", 
            "text": "Jump Start Rails  by Andy Hawthorne  Rails 4 in action  by Ryan Bigg, Yehuda Katz, Steve Klabnik, and Rebecca Skinner", 
            "title": "Recommended Books"
        }, 
        {
            "location": "/Technologies/Ruby_&_Rails/2._Rails_Beginners_Guide/#begginers-rails-docs-tutorials", 
            "text": "Codecademy learn rails  Railscasts tutorials  Learning Rails (Medium post)  Rails best practices", 
            "title": "Begginers Rails Docs - Tutorials"
        }, 
        {
            "location": "/Technologies/Ruby_&_Rails/2._Rails_Beginners_Guide/#beginners-rails-docs-videos", 
            "text": "Rails tutorial  Learn Ruby on Rails from scratch", 
            "title": "Beginners Rails Docs - Videos"
        }, 
        {
            "location": "/Technologies/Ruby_&_Rails/2._Rails_Beginners_Guide/#whats-next", 
            "text": "Once the basic Ruby on Rails concepts are clear for you and feel ready to move on, the next step is to jump to the intermediate guide. See you  there !", 
            "title": "What's next"
        }, 
        {
            "location": "/Technologies/Ruby_&_Rails/3._Ruby_Intermediate_Guide/", 
            "text": "CodigoDelSur's intermediate guide to Ruby.\n\n\nThis guide is intended for those \nRuby developers\n that already have practice programming on \nRuby\n and have already read \nCodigoDelSur's ruby beginners guide\n\n\nThe goal of this guide is to give to those that have already worked with \nRuby\n a better understanding of it, thus improving their overall code quality.\n\n\nBest practices\n\n\nHere\n you will find a set of best practices that every \nRuby developer\n must have on it's toolbelt.\n\n\nIntermediate Books\n\n\n\n\nMetaprogramming Ruby\n by Paolo Perrotta\n\n\nPractical Object-Oriented Design in Ruby: An Agile Primer\n by Sandi Metz\n\n\nEloquent Ruby\n by Russell A. Olsen\n\n\n\n\nAdvance Books\n\n\n\n\nDesign Patterns in Ruby \n by Russell A. Olsen\n\n\nRefactoring Ruby Edition\n by Jay F ields, Shane Harvie, Martin Fowler and Kent Beck\n\n\n\n\nWhat's next\n\n\nAnother level of Rails expertise is waiting for you \nhere\n!", 
            "title": "3. Ruby Intermediate Guide"
        }, 
        {
            "location": "/Technologies/Ruby_&_Rails/3._Ruby_Intermediate_Guide/#codigodelsurs-intermediate-guide-to-ruby", 
            "text": "This guide is intended for those  Ruby developers  that already have practice programming on  Ruby  and have already read  CodigoDelSur's ruby beginners guide  The goal of this guide is to give to those that have already worked with  Ruby  a better understanding of it, thus improving their overall code quality.", 
            "title": "CodigoDelSur's intermediate guide to Ruby."
        }, 
        {
            "location": "/Technologies/Ruby_&_Rails/3._Ruby_Intermediate_Guide/#best-practices", 
            "text": "Here  you will find a set of best practices that every  Ruby developer  must have on it's toolbelt.", 
            "title": "Best practices"
        }, 
        {
            "location": "/Technologies/Ruby_&_Rails/3._Ruby_Intermediate_Guide/#intermediate-books", 
            "text": "Metaprogramming Ruby  by Paolo Perrotta  Practical Object-Oriented Design in Ruby: An Agile Primer  by Sandi Metz  Eloquent Ruby  by Russell A. Olsen", 
            "title": "Intermediate Books"
        }, 
        {
            "location": "/Technologies/Ruby_&_Rails/3._Ruby_Intermediate_Guide/#advance-books", 
            "text": "Design Patterns in Ruby   by Russell A. Olsen  Refactoring Ruby Edition  by Jay F ields, Shane Harvie, Martin Fowler and Kent Beck", 
            "title": "Advance Books"
        }, 
        {
            "location": "/Technologies/Ruby_&_Rails/3._Ruby_Intermediate_Guide/#whats-next", 
            "text": "Another level of Rails expertise is waiting for you  here !", 
            "title": "What's next"
        }, 
        {
            "location": "/Technologies/Ruby_&_Rails/4._Rails_Intermediate_Guide/", 
            "text": "CodigoDelSur's intermediate guide to Rails.\n\n\nThis guide is intended for those \nRails developers\n that already have practice programming on the framework and have already read \nCodigoDelSur's rails beginners guide\n\n\nThe goal of this guide is to give to those that have already worked on \nRails\n a better understanding of it, thus improving their overall code quality.\n\n\nBest practices\n\n\nHere\n you will find a set of best practices that every \nRails developer\n must have on it's toolbelt.\n\n\nIntermediate Books\n\n\n\n\nAgile Web Development with Rails 5\n by Sam Ruby\n\n\nCrafting Rails 4 Applications\n by Jose Valim\n\n\nThe Rails 4 way\n by Obie Fernandez, Kevin Faustino, and Vitaly Kushner\n\n\n\n\nAdvance Books\n\n\n\n\nAdvanced Rails\n by Brad Ediger\n\n\nEveryday_Testing_Rails_With_RSpec\n by Aaron Summer", 
            "title": "4. Rails Intermediate Guide"
        }, 
        {
            "location": "/Technologies/Ruby_&_Rails/4._Rails_Intermediate_Guide/#codigodelsurs-intermediate-guide-to-rails", 
            "text": "This guide is intended for those  Rails developers  that already have practice programming on the framework and have already read  CodigoDelSur's rails beginners guide  The goal of this guide is to give to those that have already worked on  Rails  a better understanding of it, thus improving their overall code quality.", 
            "title": "CodigoDelSur's intermediate guide to Rails."
        }, 
        {
            "location": "/Technologies/Ruby_&_Rails/4._Rails_Intermediate_Guide/#best-practices", 
            "text": "Here  you will find a set of best practices that every  Rails developer  must have on it's toolbelt.", 
            "title": "Best practices"
        }, 
        {
            "location": "/Technologies/Ruby_&_Rails/4._Rails_Intermediate_Guide/#intermediate-books", 
            "text": "Agile Web Development with Rails 5  by Sam Ruby  Crafting Rails 4 Applications  by Jose Valim  The Rails 4 way  by Obie Fernandez, Kevin Faustino, and Vitaly Kushner", 
            "title": "Intermediate Books"
        }, 
        {
            "location": "/Technologies/Ruby_&_Rails/4._Rails_Intermediate_Guide/#advance-books", 
            "text": "Advanced Rails  by Brad Ediger  Everyday_Testing_Rails_With_RSpec  by Aaron Summer", 
            "title": "Advance Books"
        }, 
        {
            "location": "/Technologies/Ruby_&_Rails/Useful_Gems/", 
            "text": "CodigoDelSur's Ruby and Rails useful gems\n\n\nRuby Gems\n is a package manager for Ruby that provides the distribution of Ruby programs and libraries in a format called \"gem\", a tool designed to easily manage the installation of gems, and a server for distributing them.\n\n\nThis is a list of useful gems, some added by its fame and some others used for our Ruby on Rails projects and that we find very intersing and want to share with you. Please visit the gems page for more details and full documentation.\n\n\n\n\nUser\n\n\nActive Record\n\n\nPlugins\n\n\nAPI\n\n\nEmail\n\n\nFile Uploading\n\n\nSearching\n\n\nScheduled/Recurrence Jobs\n\n\nView Helper\n\n\nEnvironment Variables\n\n\nAdmin Panel\n\n\nLogging\n\n\nDebug\n\n\nCoding Style\n\n\nTesting\n\n\nProduction\n\n\nError Logging\n\n\n\n\nUser\n\n\nAuthentication\n\n\n\n\nDevise\n - Devise is a flexible authentication solution for Rails based on Warden.\n\n\nKnock\n - Seamless JWT authentication for Rails API.\n\n\nClearance\n - Rails authentication with email \n password.\n\n\nDevise token auth\n - Token based authentication for Rails JSON APIs.\n\n\n\n\nAuthorization\n\n\n\n\nPundit\n - Pundit provides a set of helpers which guide you in leveraging regular Ruby classes and object oriented design patterns to build a simple, robust and scaleable authorization system.\n\n\ncancancan\n - Continuation of CanCan, the authorization Gem for Ruby on Rails.CanCan is an authorization library for Ruby on Rails which restricts what resources a given user is allowed to access. All permissions are defined in a single location (the Ability class) and not duplicated across controllers, views, and database queries.\n\n\nrolify\n - Role management library with resource scoping.\n\n\n\n\nOmniauth\n\n\n\n\nomniauth-facebook\n\n\nomniauth-google-oauth2\n\n\nomniauth-twitter\n\n\nomniauth-github\n\n\nomniauth-linkedin-oauth2\n\n\n\n\nActive Record\n\n\n\n\nEnumerize\n - Enumerated attributes with I18n and ActiveRecord/Mongoid support. It can be integrated with Simple Form.\n\n\nSequenced\n - Sequenced is a simple gem that generates scoped sequential IDs for ActiveRecord models.\n\n\nFriendlyId\n - FriendlyId is the \u201cSwiss Army bulldozer\u201d of slugging and permalink plugins for ActiveRecord. It allows you to create pretty URL\u2019s and work with human-friendly strings as if they were numeric ids for ActiveRecord models.\n\n\nAASM\n - State machines for Ruby classes (plain Ruby, Rails Active Record, Mongoid).\n\n\nPaperTrail\n - PaperTrail lets you track changes to your models' data. It's good for auditing or versioning.\n\n\nparanoia\n - ActiveRecord plugin allowing you to hide and restore records without actually deleting them.\n\n\nValidates\n - Validates provides collection of useful custom validators for Rails applications, including:\n\n\nEmailValidator\n\n\nUrlValidator\n\n\nSlugValidator\n\n\nMoneyValidator\n\n\nIpValidator\n\n\nAssociationLengthValidator\n\n\nAbsolutePathValidator\n\n\nUriComponentValidator\n\n\nColorValidator\n\n\nEanValidator (EAN-8 \n EAN-13)\n\n\n\n\nPlugins\n\n\n\n\nkaminari\n - A Scope \n Engine based, clean, powerful, customizable and sophisticated paginator for Rails 3 and 4.\n\n\nSlack Notifier\n is a simple wrapper to send notifications to \nSlack\n webhooks.\n\n\nRails ERD\n - Generate Entity-Relationship Diagrams for Rails applications.\n\n\nBitly\n - Compress your link with Bitly shortcut urls.\n\n\n\n\nAPI\n\n\n\n\nActiveModel::Serializers\n - Serializer brings convention over configuration to your JSON generation.\n\n\nJbuilder\n - Jbuilder gives you a simple DSL for declaring JSON structures that beats massaging giant hash structures. This is particularly helpful when the generation process is fraught with conditionals and loops.\n\n\nrest-client\n - Simple HTTP and REST client for Ruby, inspired by microframework syntax for specifying actions.\n\n\nhas_scope\n - Map incoming controller parameters to named scopes in your resources.\n\n\nDocumentation\n\n\nGrape Swagger\n - Autogenerate documentation on Grape API.\n\n\nGrape Swagger UI\n - Display documentation that is generated using Grape Swagger.\n\n\napiary\n - Work together to quickly design, prototype, document and test APIs.\n\n\n\n\n\n\n\n\nEmail\n\n\n\n\nletter_opener\n - Preview mail in the browser instead of sending.\n\n\n\n\nFile Uploading\n\n\n\n\nCarrierwave\n - Carrierwave is a classier solution for file uploads for Rails, Sinatra and other Ruby web frameworks.\n\n\ncarrierwave_backgrounder\n - Offload CarrierWave's image processing and storage to a background process using Delayed Job, Resque, Sidekiq, Qu, Queue Classic or Girl Friday.\n\n\nCarrierWave Crop\n - Carrierwave extension to crop uploaded images using Jcrop plugin with preview.\n\n\nCarrierWave ImageOptimizer\n - This gem allows you to simply optimize CarrierWave images via jpegoptim or optipng using the image_optimizer gem.\n\n\nrefile\n - Refile is a modern file upload library for Ruby applications. It is simple, yet powerful.\n\n\nPaperclip\n - Easy file attachment management for ActiveRecord.\n\n\n\n\nSearching\n\n\n\n\nransack\n - Ransack enables the creation of both simple and advanced search forms for your Ruby on Rails application.\n\n\nelasticsearch-rails\n - Elasticsearch integrations for ActiveModel/Record and Ruby on Rails.\n\n\nChewy\n - High-level Elasticsearch Ruby framework based on the official elasticsearch-ruby client.\n\n\npg_search\n - pg_search builds ActiveRecord named scopes that take advantage of PostgreSQL's full text search\n\n\n\n\nScheduled/Recurrence Jobs\n\n\n\n\nWhenever\n - Whenever is a Ruby gem that provides a clear syntax for writing and deploying cron jobs.\n\n\nResque\n - Redis-backed Ruby library for creating background jobs, placing them on multiple queues, and processing them later.\n\n\nRufus-Scheduler\n - Rufus-scheduler is a Ruby gem for scheduling pieces of code (jobs). It understands running a job AT a certain time, IN a certain time, EVERY x time or simply via a CRON statement.\n\n\nDelayed Job\n - Database based asynchronous priority queue system.\n\n\nSidekiq\n - Simple, efficient background processing for Ruby.\n\n\nsidetiq\n - Recurring jobs for sidekiq.\n\n\nsidekiq-cron\n - Scheduler / Cron for Sidekiq jobs\n\n\nsidekiq-scheduler\n - Lightweight job scheduler extension for Sidekiq\n\n\n\n\nEnvironment Variables\n\n\n\n\nConfig\n - Multi-environment YAML style configurations that helps easily manage environment specific settings in an easy and usable manner.\n\n\nFigaro\n - Figaro is very simple, Heroku-friendly Rails app configuration using ENV and a single YAML file.\n\n\ndotenv\n - Dotenv is a gem that allows you to set your environment variables in .env file, and it will load it in to ENV.\n\n\n\n\nAdmin Panel\n\n\n\n\nActive Admin\n - Ruby on Rails framework for creating elegant backends for website administration.\n\n\n\n\nLogging\n\n\n\n\nImpressionist\n - Impressionist can log page impressions (technically action impressions), but it is not limited to that. You can log impressions multiple times per request. And you can also attach it to a model. The goal of this project is to provide customizable stats that are immediately accessible in your application as opposed to using Google Analytics and pulling data using their API.\n\n\nAhoy\n - Ahoy provides a solid foundation to track visits and events in Ruby, JavaScript, and native apps.\n\n\nLograge\n - An attempt to tame Rails' default policy to log everything.\n\n\n\n\nDebug\n\n\n\n\nbyebug\n - Byebug is a simple to use, feature rich debugger for Ruby 2. It uses the new TracePoint API for execution control and the new Debug Inspector API for call stack navigation, so it doesn't depend on internal core sources.\n\n\nawesome_print\n - Awesome Print is a Ruby library that pretty prints Ruby objects in full color exposing their internal structure with proper indentation.\n\n\nweb-console\n - Web Console is a debugging tool for your Ruby on Rails applications.\n\n\nspring\n - Spring is a Rails application preloader. It speeds up development by keeping your application running in the background so you don't need to boot it every time you run a test, rake task or migration.\n\n\nletter_opener\n - Preview email in the default browser instead of sending it. This means you do not need to set up email delivery in your development environment, and you no longer need to worry about accidentally sending a test email to someone else's address.\n\n\n\n\nCoding Style\n\n\n\n\nRuboCop\n - Rubocop is a Ruby static code analyzer. Out of the box it will enforce many of the guidelines outlined in the community \nRuby Style Guide\n.\n\n\nRails Best Practice\n - Rails best practice is a code metric tool to check the quality of rails codes.\n\n\nPronto\n - Quick automated code review of your changes\n\n\n\n\nTesting\n\n\n\n\nrspec-rails\n - Rspec-rails is a testing framework for Rails 3.x and 4.x.\n\n\nCapybara\n - Capybara helps you test web applications by simulating how a real user would interact with your app. And drivers:\n\n\ncapybara-webkit\n - Capybara-webkit is a capybara driver that uses Webkit via QtWebkit.\n\n\nselenium-webdriver\n - Selenium-webdriver provides ruby bindings for WebDriver.\n\n\npoltergeist\n - Poltergeist allows you to run your Capybara tests on a headless WebKit browser, provided by PhantomJS.\n\n\nfactory_girl\n - Factory_girl is a fixtures replacement with a straightforward definition syntax, support for multiple build strategies (saved instances, unsaved instances, attribute hashes, and stubbed objects), and support for multiple factories for the same class (user, admin_user, and so on), including factory inheritance.\n\n\nfactory_girl_rails\n - Factory_girl_rails provides Rails integration for factory_girl.\n\n\nDatabase Cleaner\n - Database Cleaner is a set of strategies for cleaning your database in Ruby.Support ActiveRecord, DataMapper, Sequel, MongoMapper, Mongoid, CouchPotato, Ohm and Redis.\n\n\nshoulda-matchers\n - Shoulda-matchers provides serveral matchers for testing common Rails functionality.\n\n\nResponseCodeMatchers\n - ResponseCodeMatchers provides rspec matchers to match http response code.\n\n\nSimpleCov\n - SimpleCov is a code coverage analysis tool for Ruby.\n\n\nTimecop\n - A gem providing \"time travel\" and \"time freezing\" capabilities, making it dead simple to test time-dependent code.\n\n\n\n\nSecurity\n\n\n\n\nbrakeman\n - Brakeman is a static analysis tool which checks Ruby on Rails applications for security vulnerabilities.\n\n\nbundle-audit\n - bundler-audit is a patch-level verification tool for Bundler which checks for vulnerable versions of gems and insecure gem sources.\n\n\n\n\nProduction\n\n\n\n\nCapistrano\n - Remote multi-server automation tool.\n\n\nRack Attack\n - Rack middleware to blocking \n throttling.\n\n\nResponders\n - A set of Rails responders to dry up your application.\n\n\nproduction_rails\n - Best practices for running Rails in production.\n\n\n\n\nError Logging\n\n\n\n\nRollbar\n - Exception tracking and logging from Ruby to Rollbar.\n\n\nAirbrake\n - Notifier gem for integrating apps with Airbrake.", 
            "title": "Useful Gems"
        }, 
        {
            "location": "/Technologies/Ruby_&_Rails/Useful_Gems/#codigodelsurs-ruby-and-rails-useful-gems", 
            "text": "Ruby Gems  is a package manager for Ruby that provides the distribution of Ruby programs and libraries in a format called \"gem\", a tool designed to easily manage the installation of gems, and a server for distributing them.  This is a list of useful gems, some added by its fame and some others used for our Ruby on Rails projects and that we find very intersing and want to share with you. Please visit the gems page for more details and full documentation.   User  Active Record  Plugins  API  Email  File Uploading  Searching  Scheduled/Recurrence Jobs  View Helper  Environment Variables  Admin Panel  Logging  Debug  Coding Style  Testing  Production  Error Logging", 
            "title": "CodigoDelSur's Ruby and Rails useful gems"
        }, 
        {
            "location": "/Technologies/Ruby_&_Rails/Useful_Gems/#user", 
            "text": "", 
            "title": "User"
        }, 
        {
            "location": "/Technologies/Ruby_&_Rails/Useful_Gems/#authentication", 
            "text": "Devise  - Devise is a flexible authentication solution for Rails based on Warden.  Knock  - Seamless JWT authentication for Rails API.  Clearance  - Rails authentication with email   password.  Devise token auth  - Token based authentication for Rails JSON APIs.", 
            "title": "Authentication"
        }, 
        {
            "location": "/Technologies/Ruby_&_Rails/Useful_Gems/#authorization", 
            "text": "Pundit  - Pundit provides a set of helpers which guide you in leveraging regular Ruby classes and object oriented design patterns to build a simple, robust and scaleable authorization system.  cancancan  - Continuation of CanCan, the authorization Gem for Ruby on Rails.CanCan is an authorization library for Ruby on Rails which restricts what resources a given user is allowed to access. All permissions are defined in a single location (the Ability class) and not duplicated across controllers, views, and database queries.  rolify  - Role management library with resource scoping.", 
            "title": "Authorization"
        }, 
        {
            "location": "/Technologies/Ruby_&_Rails/Useful_Gems/#omniauth", 
            "text": "omniauth-facebook  omniauth-google-oauth2  omniauth-twitter  omniauth-github  omniauth-linkedin-oauth2", 
            "title": "Omniauth"
        }, 
        {
            "location": "/Technologies/Ruby_&_Rails/Useful_Gems/#active-record", 
            "text": "Enumerize  - Enumerated attributes with I18n and ActiveRecord/Mongoid support. It can be integrated with Simple Form.  Sequenced  - Sequenced is a simple gem that generates scoped sequential IDs for ActiveRecord models.  FriendlyId  - FriendlyId is the \u201cSwiss Army bulldozer\u201d of slugging and permalink plugins for ActiveRecord. It allows you to create pretty URL\u2019s and work with human-friendly strings as if they were numeric ids for ActiveRecord models.  AASM  - State machines for Ruby classes (plain Ruby, Rails Active Record, Mongoid).  PaperTrail  - PaperTrail lets you track changes to your models' data. It's good for auditing or versioning.  paranoia  - ActiveRecord plugin allowing you to hide and restore records without actually deleting them.  Validates  - Validates provides collection of useful custom validators for Rails applications, including:  EmailValidator  UrlValidator  SlugValidator  MoneyValidator  IpValidator  AssociationLengthValidator  AbsolutePathValidator  UriComponentValidator  ColorValidator  EanValidator (EAN-8   EAN-13)", 
            "title": "Active Record"
        }, 
        {
            "location": "/Technologies/Ruby_&_Rails/Useful_Gems/#plugins", 
            "text": "kaminari  - A Scope   Engine based, clean, powerful, customizable and sophisticated paginator for Rails 3 and 4.  Slack Notifier  is a simple wrapper to send notifications to  Slack  webhooks.  Rails ERD  - Generate Entity-Relationship Diagrams for Rails applications.  Bitly  - Compress your link with Bitly shortcut urls.", 
            "title": "Plugins"
        }, 
        {
            "location": "/Technologies/Ruby_&_Rails/Useful_Gems/#api", 
            "text": "ActiveModel::Serializers  - Serializer brings convention over configuration to your JSON generation.  Jbuilder  - Jbuilder gives you a simple DSL for declaring JSON structures that beats massaging giant hash structures. This is particularly helpful when the generation process is fraught with conditionals and loops.  rest-client  - Simple HTTP and REST client for Ruby, inspired by microframework syntax for specifying actions.  has_scope  - Map incoming controller parameters to named scopes in your resources.  Documentation  Grape Swagger  - Autogenerate documentation on Grape API.  Grape Swagger UI  - Display documentation that is generated using Grape Swagger.  apiary  - Work together to quickly design, prototype, document and test APIs.", 
            "title": "API"
        }, 
        {
            "location": "/Technologies/Ruby_&_Rails/Useful_Gems/#email", 
            "text": "letter_opener  - Preview mail in the browser instead of sending.", 
            "title": "Email"
        }, 
        {
            "location": "/Technologies/Ruby_&_Rails/Useful_Gems/#file-uploading", 
            "text": "Carrierwave  - Carrierwave is a classier solution for file uploads for Rails, Sinatra and other Ruby web frameworks.  carrierwave_backgrounder  - Offload CarrierWave's image processing and storage to a background process using Delayed Job, Resque, Sidekiq, Qu, Queue Classic or Girl Friday.  CarrierWave Crop  - Carrierwave extension to crop uploaded images using Jcrop plugin with preview.  CarrierWave ImageOptimizer  - This gem allows you to simply optimize CarrierWave images via jpegoptim or optipng using the image_optimizer gem.  refile  - Refile is a modern file upload library for Ruby applications. It is simple, yet powerful.  Paperclip  - Easy file attachment management for ActiveRecord.", 
            "title": "File Uploading"
        }, 
        {
            "location": "/Technologies/Ruby_&_Rails/Useful_Gems/#searching", 
            "text": "ransack  - Ransack enables the creation of both simple and advanced search forms for your Ruby on Rails application.  elasticsearch-rails  - Elasticsearch integrations for ActiveModel/Record and Ruby on Rails.  Chewy  - High-level Elasticsearch Ruby framework based on the official elasticsearch-ruby client.  pg_search  - pg_search builds ActiveRecord named scopes that take advantage of PostgreSQL's full text search", 
            "title": "Searching"
        }, 
        {
            "location": "/Technologies/Ruby_&_Rails/Useful_Gems/#scheduledrecurrence-jobs", 
            "text": "Whenever  - Whenever is a Ruby gem that provides a clear syntax for writing and deploying cron jobs.  Resque  - Redis-backed Ruby library for creating background jobs, placing them on multiple queues, and processing them later.  Rufus-Scheduler  - Rufus-scheduler is a Ruby gem for scheduling pieces of code (jobs). It understands running a job AT a certain time, IN a certain time, EVERY x time or simply via a CRON statement.  Delayed Job  - Database based asynchronous priority queue system.  Sidekiq  - Simple, efficient background processing for Ruby.  sidetiq  - Recurring jobs for sidekiq.  sidekiq-cron  - Scheduler / Cron for Sidekiq jobs  sidekiq-scheduler  - Lightweight job scheduler extension for Sidekiq", 
            "title": "Scheduled/Recurrence Jobs"
        }, 
        {
            "location": "/Technologies/Ruby_&_Rails/Useful_Gems/#environment-variables", 
            "text": "Config  - Multi-environment YAML style configurations that helps easily manage environment specific settings in an easy and usable manner.  Figaro  - Figaro is very simple, Heroku-friendly Rails app configuration using ENV and a single YAML file.  dotenv  - Dotenv is a gem that allows you to set your environment variables in .env file, and it will load it in to ENV.", 
            "title": "Environment Variables"
        }, 
        {
            "location": "/Technologies/Ruby_&_Rails/Useful_Gems/#admin-panel", 
            "text": "Active Admin  - Ruby on Rails framework for creating elegant backends for website administration.", 
            "title": "Admin Panel"
        }, 
        {
            "location": "/Technologies/Ruby_&_Rails/Useful_Gems/#logging", 
            "text": "Impressionist  - Impressionist can log page impressions (technically action impressions), but it is not limited to that. You can log impressions multiple times per request. And you can also attach it to a model. The goal of this project is to provide customizable stats that are immediately accessible in your application as opposed to using Google Analytics and pulling data using their API.  Ahoy  - Ahoy provides a solid foundation to track visits and events in Ruby, JavaScript, and native apps.  Lograge  - An attempt to tame Rails' default policy to log everything.", 
            "title": "Logging"
        }, 
        {
            "location": "/Technologies/Ruby_&_Rails/Useful_Gems/#debug", 
            "text": "byebug  - Byebug is a simple to use, feature rich debugger for Ruby 2. It uses the new TracePoint API for execution control and the new Debug Inspector API for call stack navigation, so it doesn't depend on internal core sources.  awesome_print  - Awesome Print is a Ruby library that pretty prints Ruby objects in full color exposing their internal structure with proper indentation.  web-console  - Web Console is a debugging tool for your Ruby on Rails applications.  spring  - Spring is a Rails application preloader. It speeds up development by keeping your application running in the background so you don't need to boot it every time you run a test, rake task or migration.  letter_opener  - Preview email in the default browser instead of sending it. This means you do not need to set up email delivery in your development environment, and you no longer need to worry about accidentally sending a test email to someone else's address.", 
            "title": "Debug"
        }, 
        {
            "location": "/Technologies/Ruby_&_Rails/Useful_Gems/#coding-style", 
            "text": "RuboCop  - Rubocop is a Ruby static code analyzer. Out of the box it will enforce many of the guidelines outlined in the community  Ruby Style Guide .  Rails Best Practice  - Rails best practice is a code metric tool to check the quality of rails codes.  Pronto  - Quick automated code review of your changes", 
            "title": "Coding Style"
        }, 
        {
            "location": "/Technologies/Ruby_&_Rails/Useful_Gems/#testing", 
            "text": "rspec-rails  - Rspec-rails is a testing framework for Rails 3.x and 4.x.  Capybara  - Capybara helps you test web applications by simulating how a real user would interact with your app. And drivers:  capybara-webkit  - Capybara-webkit is a capybara driver that uses Webkit via QtWebkit.  selenium-webdriver  - Selenium-webdriver provides ruby bindings for WebDriver.  poltergeist  - Poltergeist allows you to run your Capybara tests on a headless WebKit browser, provided by PhantomJS.  factory_girl  - Factory_girl is a fixtures replacement with a straightforward definition syntax, support for multiple build strategies (saved instances, unsaved instances, attribute hashes, and stubbed objects), and support for multiple factories for the same class (user, admin_user, and so on), including factory inheritance.  factory_girl_rails  - Factory_girl_rails provides Rails integration for factory_girl.  Database Cleaner  - Database Cleaner is a set of strategies for cleaning your database in Ruby.Support ActiveRecord, DataMapper, Sequel, MongoMapper, Mongoid, CouchPotato, Ohm and Redis.  shoulda-matchers  - Shoulda-matchers provides serveral matchers for testing common Rails functionality.  ResponseCodeMatchers  - ResponseCodeMatchers provides rspec matchers to match http response code.  SimpleCov  - SimpleCov is a code coverage analysis tool for Ruby.  Timecop  - A gem providing \"time travel\" and \"time freezing\" capabilities, making it dead simple to test time-dependent code.", 
            "title": "Testing"
        }, 
        {
            "location": "/Technologies/Ruby_&_Rails/Useful_Gems/#security", 
            "text": "brakeman  - Brakeman is a static analysis tool which checks Ruby on Rails applications for security vulnerabilities.  bundle-audit  - bundler-audit is a patch-level verification tool for Bundler which checks for vulnerable versions of gems and insecure gem sources.", 
            "title": "Security"
        }, 
        {
            "location": "/Technologies/Ruby_&_Rails/Useful_Gems/#production", 
            "text": "Capistrano  - Remote multi-server automation tool.  Rack Attack  - Rack middleware to blocking   throttling.  Responders  - A set of Rails responders to dry up your application.  production_rails  - Best practices for running Rails in production.", 
            "title": "Production"
        }, 
        {
            "location": "/Technologies/Ruby_&_Rails/Useful_Gems/#error-logging", 
            "text": "Rollbar  - Exception tracking and logging from Ruby to Rollbar.  Airbrake  - Notifier gem for integrating apps with Airbrake.", 
            "title": "Error Logging"
        }, 
        {
            "location": "/Technologies/Web_Development/Editor_Plugins/", 
            "text": "Editor plugins\n\n\nThis page is a list of useful plugins and tools for IDEs and Editors\n\n\nVisual Studio Code\n\n\n\n\nGit Lens\n : GitLens supercharges the built-in Visual Studio Code Git capabilities. It helps you to visualize code authorship at a glance via Git blame annotations and code lens, seamlessly navigate and explore the history of a file or branch, gain valuable insights via powerful comparison commands, and so much more\n\n\n\n\nAtom\n\n\nSublime", 
            "title": "Editor Plugins"
        }, 
        {
            "location": "/Technologies/Web_Development/Editor_Plugins/#editor-plugins", 
            "text": "This page is a list of useful plugins and tools for IDEs and Editors", 
            "title": "Editor plugins"
        }, 
        {
            "location": "/Technologies/Web_Development/Editor_Plugins/#visual-studio-code", 
            "text": "Git Lens  : GitLens supercharges the built-in Visual Studio Code Git capabilities. It helps you to visualize code authorship at a glance via Git blame annotations and code lens, seamlessly navigate and explore the history of a file or branch, gain valuable insights via powerful comparison commands, and so much more", 
            "title": "Visual Studio Code"
        }, 
        {
            "location": "/Technologies/Web_Development/Editor_Plugins/#atom", 
            "text": "", 
            "title": "Atom"
        }, 
        {
            "location": "/Technologies/Web_Development/Editor_Plugins/#sublime", 
            "text": "", 
            "title": "Sublime"
        }, 
        {
            "location": "/Technologies/iOS/1._New to iOS/", 
            "text": "New in iOS development?\n\n\nFor those who are new on iOS app development, here you will find a series of  links and materials that will teach you how to get stated.\n\n\nXcode\n\n\nFirst of all you will need to install \nXcode\n which is the IDE used to develop app on every Apple platforms (iPhone, iPad, Mac, Apple watch etc.)\n\n\nHere\n is a complete guide about Xcode.\n\n\niOS Basic Concepts\n\n\nBasically you can write iOS native applications in two languages: \nObjective-C\n and \nSwift\n ( this \nlink\n contains a nice guide about swift programing languages).  In order to develop apps you will be interacting with \nCocoa Touch\n that is the iOS application development environment. \n\n\nCocoa Touch includes Foundation and UIKit frameworks , which are essential to program iOS apps.\n\n\n\n\nThe \nFoundation framework\n implements the root class, NSObject, which defines basic object behavior. It implements classes that represent primitive types (for example, strings and numbers) and collections (for example, arrays and dictionaries). Foundation also provides facilities for internationalization, object persistence, file management, and XML processing. You can use its classes to access underlying system entities and services, such as ports, threads, locks, and processes.\n\n\nUIKit framework\n is use to develop the app\u2019s user interface. UIKit include classes for event handling, drawing, image-handling, text processing, typography, and interapplication data transfer. It also includes user-interface elements such as table views, sliders, buttons, text fields, and alert dialogs. \nHere\n there is a catalog about the UI elements avaliable on UIKit.\n\n\n\n\nAn other main concept is that Cocoa Touch follows the MVC (\nModel-View-Controller\n) pattern, a design patter that classifies the application\u2019s objects in three role categories (model, view, or controller) and defines their communication.\n\n\nCode Signing\n\n\nIn order to distribute your app, submit it to the AppStore, install it on devices or integrate some app services (e.g. Push Notifications) you will need to code sign your app. To get depthly on this you can go to \nApple's code signing suppot page\n or \nApp Distribution Guide\n.\n\n\nTutorials\n\n\nTo start developing iOS apps we highly recommend you to follow this tutorials: \n\n\n\n\n\n\nStart Developing iOS Apps (Swift)\n\n\n\n\n\n\nStart Developing iOS Apps (objective c)\n\n\n\n\n\n\nHelp \n Support Links\n\n\n\n\n\n\nhttps://developer.apple.com/library/content/navigation/\n\n\n\n\n\n\nhttps://www.raywenderlich.com", 
            "title": "1. New to iOS"
        }, 
        {
            "location": "/Technologies/iOS/1._New to iOS/#new-in-ios-development", 
            "text": "For those who are new on iOS app development, here you will find a series of  links and materials that will teach you how to get stated.", 
            "title": "New in iOS development?"
        }, 
        {
            "location": "/Technologies/iOS/1._New to iOS/#xcode", 
            "text": "First of all you will need to install  Xcode  which is the IDE used to develop app on every Apple platforms (iPhone, iPad, Mac, Apple watch etc.)  Here  is a complete guide about Xcode.", 
            "title": "Xcode"
        }, 
        {
            "location": "/Technologies/iOS/1._New to iOS/#ios-basic-concepts", 
            "text": "Basically you can write iOS native applications in two languages:  Objective-C  and  Swift  ( this  link  contains a nice guide about swift programing languages).  In order to develop apps you will be interacting with  Cocoa Touch  that is the iOS application development environment.   Cocoa Touch includes Foundation and UIKit frameworks , which are essential to program iOS apps.   The  Foundation framework  implements the root class, NSObject, which defines basic object behavior. It implements classes that represent primitive types (for example, strings and numbers) and collections (for example, arrays and dictionaries). Foundation also provides facilities for internationalization, object persistence, file management, and XML processing. You can use its classes to access underlying system entities and services, such as ports, threads, locks, and processes.  UIKit framework  is use to develop the app\u2019s user interface. UIKit include classes for event handling, drawing, image-handling, text processing, typography, and interapplication data transfer. It also includes user-interface elements such as table views, sliders, buttons, text fields, and alert dialogs.  Here  there is a catalog about the UI elements avaliable on UIKit.   An other main concept is that Cocoa Touch follows the MVC ( Model-View-Controller ) pattern, a design patter that classifies the application\u2019s objects in three role categories (model, view, or controller) and defines their communication.", 
            "title": "iOS Basic Concepts"
        }, 
        {
            "location": "/Technologies/iOS/1._New to iOS/#code-signing", 
            "text": "In order to distribute your app, submit it to the AppStore, install it on devices or integrate some app services (e.g. Push Notifications) you will need to code sign your app. To get depthly on this you can go to  Apple's code signing suppot page  or  App Distribution Guide .", 
            "title": "Code Signing"
        }, 
        {
            "location": "/Technologies/iOS/1._New to iOS/#tutorials", 
            "text": "To start developing iOS apps we highly recommend you to follow this tutorials:     Start Developing iOS Apps (Swift)    Start Developing iOS Apps (objective c)", 
            "title": "Tutorials"
        }, 
        {
            "location": "/Technologies/iOS/1._New to iOS/#help-support-links", 
            "text": "https://developer.apple.com/library/content/navigation/    https://www.raywenderlich.com", 
            "title": "Help &amp; Support Links"
        }, 
        {
            "location": "/Technologies/iOS/2._Projects/", 
            "text": "iOS Projects\n\n\nWe are going to describe the most essential tools that we usually use on our iOS projects. \n\n\nDependency management\n\n\nThere are two main dependency management tools in iOS: \ncocoapods\n and \nCarthage\n. Here at \nCodigoDelSur\n we mostly use cocoapods. Using cocoapods, the dependencies are listed in a text file named Podfile. To initialize the project you just need to go to the Xcode project folder and run on a terminal the command \n$ pod init\n, this will create the podfile setup. Once the project has the podfile with the dependency libraries listed inside you can install them by typing the command \n$ pod intall\n. After the command finishes you can open the generated workspace to start coding. \n\n\nDistribution tools\n\n\nFor distribute our app to our clients and test teams we use the next platforms:\n\n\n\n\nHockeyapp\n Is a complete platform for distributing app builds, it provides a lot of useful feature like feedback, metrics and crash reporting.  \n\n\nCrashlytics\n Another nice distribution tool. Originally it was a crash reporting tool and now is part of the \nFabric\n platform and also provides a distribution system. \n\n\nTestflight\n The apple distribution system, is integrated with \nXcode\n and it can allow the app to be tested by up to 2,000 testers by only having their emails.\n\n\nDiawi\n is a very straight forward platform you just drag and drop the ipa file and it will return you the url where the users can download it.\n\n\n\n\nCode Style\n\n\nObjective-C Code Style\n\n\nOn what concerns about naming classes, variables and methods we follow the \nApple's Coding Guidelines for Cocoa\n. Regarding code style we have created an uncrustify configuration file to automatically apply our code style. On this \nlink\n you can access to it.\nHere you can see some guides that we based from: \n\n\n\n\nNew York Times\n\n\nGitHub\n\n\nCocoaDevCentral\n\n\nWikimedia\n\n\nRaywenderlich.com Objective-C style guide\n\n\n\n\nSwift Code Style\n\n\n\n\nThe Official raywenderlich.com Swift Style Guide\n\n\nLinkedIn's Swift Style Guide\n\n\n\n\nCommenting code\n\n\nWhen commenting our code we like to comments our header's using the \nHeaderDoc\n notation. Usually we use the \n/** - */\n notation to start a documentation block. HeaderDoc works with a series of tags. These tags can be grouped into two categories: \nTop-level tags\n describe the type of declaration that and \nSecond-Level Tags\n that adds additional information about the declaration. Our preferred tags are:\n\n\nTop-Level Tags\n\n\n\n\n@class\n Used to point the starting point of a documentation block regarding a class. \n\n\n@protocol\n Just like the above, just for protocols.\n\n\n\n\nSecond-Level Tags\n\n\n\n\n@brief\n Used to write a short description about the method, property, class, file, struct, or enum you\u2019re documenting. No line breaks are allowed. \n\n\n@discussion\n Used to write a thorough description. You can add line breaks if needed.\n\n\n@param\n With this you can describe a parameter of a method or function. You can have multiple such tags.\n\n\n@return\n Used to specify the return value of a method or function.\n\n\n\n\nBy using this notation, you can build easily html documentation using tools like \njazzy\n, \nDoxygen\n and \nHeaderDoc\n.\nOn this \nlink\n you can check an interesting article describing those tools.\n\n\nAlso we use the \npragma mark\n directive in all of our classes. The \npragma mark\n directive helps to organize the methods of a class making the code more clean and easy to read. It help us to separate methods and group them by delegates implementations, IBAction, etc.\n\n\nLibraries\n\n\nHere is the list of our most used iOS libraries:\n\n\n\n\nAFNetworking\n This is the networking framework that we mostly use. Its really nice, and it really makes life a little bit easy. \n\n\nAlamofire\n The networking framework we use for swift projects..\n\n\nCrashlytics\n is the crash reporting to that we use here.\n\n\nCocoaLumberjack\n Its a logging framework that helps us to organize and manage our app's console logs. \n\n\nFLEX\n An in-app debugging and exploration tool for iOS.\n\n\nReachability\n A really simple but good way to evaluate host availability is using this library.\n\n\nSVProgressHUD\n Provides us a easy way to implement loading alert while waiting for something.\n\n\n\n\nOther nice libraries\n\n\n\n\nPusher\n Is a library that we have used to establish socket communication with the backend.\n\n\nCharts\n Help us when we want to display awesome charts.\n\n\nMapbox\n Provide us ablilty to show really nice maps in our iOS apps.\n\n\n\n\nOn the links below you can find really complete list of iOS libraries:\n\n\n\n\nAwesome-ios\n\n\nAwesome-ios-ui", 
            "title": "2. Projects"
        }, 
        {
            "location": "/Technologies/iOS/2._Projects/#ios-projects", 
            "text": "We are going to describe the most essential tools that we usually use on our iOS projects.", 
            "title": "iOS Projects"
        }, 
        {
            "location": "/Technologies/iOS/2._Projects/#dependency-management", 
            "text": "There are two main dependency management tools in iOS:  cocoapods  and  Carthage . Here at  CodigoDelSur  we mostly use cocoapods. Using cocoapods, the dependencies are listed in a text file named Podfile. To initialize the project you just need to go to the Xcode project folder and run on a terminal the command  $ pod init , this will create the podfile setup. Once the project has the podfile with the dependency libraries listed inside you can install them by typing the command  $ pod intall . After the command finishes you can open the generated workspace to start coding.", 
            "title": "Dependency management"
        }, 
        {
            "location": "/Technologies/iOS/2._Projects/#distribution-tools", 
            "text": "For distribute our app to our clients and test teams we use the next platforms:   Hockeyapp  Is a complete platform for distributing app builds, it provides a lot of useful feature like feedback, metrics and crash reporting.    Crashlytics  Another nice distribution tool. Originally it was a crash reporting tool and now is part of the  Fabric  platform and also provides a distribution system.   Testflight  The apple distribution system, is integrated with  Xcode  and it can allow the app to be tested by up to 2,000 testers by only having their emails.  Diawi  is a very straight forward platform you just drag and drop the ipa file and it will return you the url where the users can download it.", 
            "title": "Distribution tools"
        }, 
        {
            "location": "/Technologies/iOS/2._Projects/#code-style", 
            "text": "", 
            "title": "Code Style"
        }, 
        {
            "location": "/Technologies/iOS/2._Projects/#objective-c-code-style", 
            "text": "On what concerns about naming classes, variables and methods we follow the  Apple's Coding Guidelines for Cocoa . Regarding code style we have created an uncrustify configuration file to automatically apply our code style. On this  link  you can access to it.\nHere you can see some guides that we based from:    New York Times  GitHub  CocoaDevCentral  Wikimedia  Raywenderlich.com Objective-C style guide", 
            "title": "Objective-C Code Style"
        }, 
        {
            "location": "/Technologies/iOS/2._Projects/#swift-code-style", 
            "text": "The Official raywenderlich.com Swift Style Guide  LinkedIn's Swift Style Guide", 
            "title": "Swift Code Style"
        }, 
        {
            "location": "/Technologies/iOS/2._Projects/#commenting-code", 
            "text": "When commenting our code we like to comments our header's using the  HeaderDoc  notation. Usually we use the  /** - */  notation to start a documentation block. HeaderDoc works with a series of tags. These tags can be grouped into two categories:  Top-level tags  describe the type of declaration that and  Second-Level Tags  that adds additional information about the declaration. Our preferred tags are:", 
            "title": "Commenting code"
        }, 
        {
            "location": "/Technologies/iOS/2._Projects/#top-level-tags", 
            "text": "@class  Used to point the starting point of a documentation block regarding a class.   @protocol  Just like the above, just for protocols.", 
            "title": "Top-Level Tags"
        }, 
        {
            "location": "/Technologies/iOS/2._Projects/#second-level-tags", 
            "text": "@brief  Used to write a short description about the method, property, class, file, struct, or enum you\u2019re documenting. No line breaks are allowed.   @discussion  Used to write a thorough description. You can add line breaks if needed.  @param  With this you can describe a parameter of a method or function. You can have multiple such tags.  @return  Used to specify the return value of a method or function.   By using this notation, you can build easily html documentation using tools like  jazzy ,  Doxygen  and  HeaderDoc .\nOn this  link  you can check an interesting article describing those tools.  Also we use the  pragma mark  directive in all of our classes. The  pragma mark  directive helps to organize the methods of a class making the code more clean and easy to read. It help us to separate methods and group them by delegates implementations, IBAction, etc.", 
            "title": "Second-Level Tags"
        }, 
        {
            "location": "/Technologies/iOS/2._Projects/#libraries", 
            "text": "Here is the list of our most used iOS libraries:   AFNetworking  This is the networking framework that we mostly use. Its really nice, and it really makes life a little bit easy.   Alamofire  The networking framework we use for swift projects..  Crashlytics  is the crash reporting to that we use here.  CocoaLumberjack  Its a logging framework that helps us to organize and manage our app's console logs.   FLEX  An in-app debugging and exploration tool for iOS.  Reachability  A really simple but good way to evaluate host availability is using this library.  SVProgressHUD  Provides us a easy way to implement loading alert while waiting for something.", 
            "title": "Libraries"
        }, 
        {
            "location": "/Technologies/iOS/2._Projects/#other-nice-libraries", 
            "text": "Pusher  Is a library that we have used to establish socket communication with the backend.  Charts  Help us when we want to display awesome charts.  Mapbox  Provide us ablilty to show really nice maps in our iOS apps.   On the links below you can find really complete list of iOS libraries:   Awesome-ios  Awesome-ios-ui", 
            "title": "Other nice libraries"
        }, 
        {
            "location": "/Technologies/iOS/3. Continuous Integration/", 
            "text": "Continuous Integration\n\n\nContinuous Integration\n is a well know practice that many developer teams had acquired. Basically Continuous Integration consist in execute plenty frequently an automated integration procedure (download app source, build app, execute tests, etc.) in order to rapidly detect errors and always ensure a deliverable build. Here at \nCodigoDelSur\n we are really happy with the results of this practice, it has been super helpful to anticipate issues on our apps. \n\n\nOn this page we are going to enumerate and explain some of the tools we use to implement continuous integration in our projects. Because every project has its own nature, continuous integration flows might be very different between projects. That's why we can not give you a recipe of which ci tools you must to use, we just can tell you which ones we used and have gave us nice results.\n\n\nAutomation server\n\n\nThe Automation server is in charge of execute the continuous integration flows or pipeline. Depending on the configured triggers, the automation server will execute a certain pipeline. The possible flows are almost infinite, for example you can build and test your app when the repo has received changes, or you can generate a test build every morning for the QA team etc. As it was mentioned before, all depends on the project nature. \n\n\nAs automation servers we usually use our \nJenkins\n locally hosted or \nBitrise\n. Also we have a nice experience using \nCircleCi\n.\n\n\nFastlane\n\n\nWe love \nFastlane\n, it's the main automation tool that we use. It allows us to automate a lot of task like downloading the latest provisioning profile, tests our apps, archive them, distribute them, notify the results of the flows via slack, etc. Fastlane contains a series of tools that are in charge of those tasks. Also it provides you with a Fastfile file where you can write your flows. Beside the Fastlane's main tools it has a series of \nactions\n that are awesome!. You can check our generic fastfile \nhere\n.\n\n\nHere is the \ndocumentation\n section where you can find some useful articles like \nJenkins Integration\n or \nCircleCi config\n.   \n\n\nTesting\n\n\nTo test our apps we have used mainly the apple's test frameworks \nXCtest\n and \nUI XCTest\n. For those how are new to unit testing here is a \nvideo\n explaining a little bit the basic theoretical concepts. Also we recommend you to watch the \nWWDC 2015 UI Testing in Xcode\n, it gives you a nice overview of the UI XCTest.\n\n\nOther links: \n\n\n\n\nTesting with XCode\n\n\nUI Testing cheat sheet\n   \n\n\nXCTest API Reference\n\n\n\n\nBDD - Behavior Driven Development\n\n\nWe also have used the \nBBD\n framework \nCedar\n. It seems to us to be a really nice framework and really easy to use. If you want to know more about this great practice you can check the following links: \nhttp://behaviourdriven.org\n, \nagilealliance\n and \nWikipedia - BDD\n.\n\n\nOther Tools\n\n\n\n\n\n\nHere\n we explained the different distribution tools that we currently use. In our continuous integration flow we deliver our app's build via one of those tools.\n\n\n\n\n\n\nStatic analysis\n We have worked with different static analysis tools on some of our projects. Beside \nClang Static Analyzer\n we also have used \nInfer\n and \nOClint\n. On this \nlink\n you can find a script with examples of how we run those commands and the rules that we exclude. On some projects we have activated the option Build Settings -\n Analyze During \u2018Build\u2019 to automatically get a static analysis (from \nClang Static Analyzer\n) during the app Build process.", 
            "title": "3. Continuous Integration"
        }, 
        {
            "location": "/Technologies/iOS/3. Continuous Integration/#continuous-integration", 
            "text": "Continuous Integration  is a well know practice that many developer teams had acquired. Basically Continuous Integration consist in execute plenty frequently an automated integration procedure (download app source, build app, execute tests, etc.) in order to rapidly detect errors and always ensure a deliverable build. Here at  CodigoDelSur  we are really happy with the results of this practice, it has been super helpful to anticipate issues on our apps.   On this page we are going to enumerate and explain some of the tools we use to implement continuous integration in our projects. Because every project has its own nature, continuous integration flows might be very different between projects. That's why we can not give you a recipe of which ci tools you must to use, we just can tell you which ones we used and have gave us nice results.", 
            "title": "Continuous Integration"
        }, 
        {
            "location": "/Technologies/iOS/3. Continuous Integration/#automation-server", 
            "text": "The Automation server is in charge of execute the continuous integration flows or pipeline. Depending on the configured triggers, the automation server will execute a certain pipeline. The possible flows are almost infinite, for example you can build and test your app when the repo has received changes, or you can generate a test build every morning for the QA team etc. As it was mentioned before, all depends on the project nature.   As automation servers we usually use our  Jenkins  locally hosted or  Bitrise . Also we have a nice experience using  CircleCi .", 
            "title": "Automation server"
        }, 
        {
            "location": "/Technologies/iOS/3. Continuous Integration/#fastlane", 
            "text": "We love  Fastlane , it's the main automation tool that we use. It allows us to automate a lot of task like downloading the latest provisioning profile, tests our apps, archive them, distribute them, notify the results of the flows via slack, etc. Fastlane contains a series of tools that are in charge of those tasks. Also it provides you with a Fastfile file where you can write your flows. Beside the Fastlane's main tools it has a series of  actions  that are awesome!. You can check our generic fastfile  here .  Here is the  documentation  section where you can find some useful articles like  Jenkins Integration  or  CircleCi config .", 
            "title": "Fastlane"
        }, 
        {
            "location": "/Technologies/iOS/3. Continuous Integration/#testing", 
            "text": "To test our apps we have used mainly the apple's test frameworks  XCtest  and  UI XCTest . For those how are new to unit testing here is a  video  explaining a little bit the basic theoretical concepts. Also we recommend you to watch the  WWDC 2015 UI Testing in Xcode , it gives you a nice overview of the UI XCTest.  Other links:    Testing with XCode  UI Testing cheat sheet      XCTest API Reference", 
            "title": "Testing"
        }, 
        {
            "location": "/Technologies/iOS/3. Continuous Integration/#bdd-behavior-driven-development", 
            "text": "We also have used the  BBD  framework  Cedar . It seems to us to be a really nice framework and really easy to use. If you want to know more about this great practice you can check the following links:  http://behaviourdriven.org ,  agilealliance  and  Wikipedia - BDD .", 
            "title": "BDD - Behavior Driven Development"
        }, 
        {
            "location": "/Technologies/iOS/3. Continuous Integration/#other-tools", 
            "text": "Here  we explained the different distribution tools that we currently use. In our continuous integration flow we deliver our app's build via one of those tools.    Static analysis  We have worked with different static analysis tools on some of our projects. Beside  Clang Static Analyzer  we also have used  Infer  and  OClint . On this  link  you can find a script with examples of how we run those commands and the rules that we exclude. On some projects we have activated the option Build Settings -  Analyze During \u2018Build\u2019 to automatically get a static analysis (from  Clang Static Analyzer ) during the app Build process.", 
            "title": "Other Tools"
        }, 
        {
            "location": "/Tools/Git/1._Getting_Started/", 
            "text": "Git - Version Control System\n\n\nIf you are beginer with git you can check these blogs to get started.\n\n\n\n\n\n\nWhat is git\n Here you can find a complete guide about git. There you will find beginners article as well as some interesting advance posts.\n\n\n\n\n\n\nBasic commands\n A list with the most essential git commands.\n\n\n\n\n\n\nBranch management\n\n\nBranch management is essential to any dev team. Learn how to structure your processes around your git branches. Follow these useful tips and your code deploys and rollbacks will be much easier. Having a tidy git repo will save your day in the event of a bug, or having to take out a feature already running on production.\n\nBranch Management\n\n\nUseful tools\n\n\nMastering Git's Command Line Interface will certainly payoff in the future, but it can be intimidating at the beginning. So here at CodigoDelSur we also use tools that make our lives easier. Here you will find some tools that will simplify your daily work with git.\n\nTools\n\n\nHow to Write Git Commit Messages\n\n\nWriting good commit messages is essential for a project's maintainability. It\u2019s worth taking the time to learn how to write commit messages so that we end having a useful revision history.\nCheck out our guide for writing good commit messages \nhere\n\n\nReferences\n\n\nhttp://nvie.com/posts/a-successful-git-branching-model/\n.\n\n\nhttp://martinfowler.com/bliki/FeatureToggle.html\n.\n\n\nhttps://www.atlassian.com/agile/branching\n.\n\n\nThe following topics will be covered along this documentation:\n\n\n\n\n    \nBranch Management\n\n    \nTools\n\n    \nWriting good commit messages", 
            "title": "1. Getting Started"
        }, 
        {
            "location": "/Tools/Git/1._Getting_Started/#git-version-control-system", 
            "text": "If you are beginer with git you can check these blogs to get started.    What is git  Here you can find a complete guide about git. There you will find beginners article as well as some interesting advance posts.    Basic commands  A list with the most essential git commands.", 
            "title": "Git - Version Control System"
        }, 
        {
            "location": "/Tools/Git/1._Getting_Started/#branch-management", 
            "text": "Branch management is essential to any dev team. Learn how to structure your processes around your git branches. Follow these useful tips and your code deploys and rollbacks will be much easier. Having a tidy git repo will save your day in the event of a bug, or having to take out a feature already running on production. Branch Management", 
            "title": "Branch management"
        }, 
        {
            "location": "/Tools/Git/1._Getting_Started/#useful-tools", 
            "text": "Mastering Git's Command Line Interface will certainly payoff in the future, but it can be intimidating at the beginning. So here at CodigoDelSur we also use tools that make our lives easier. Here you will find some tools that will simplify your daily work with git. Tools", 
            "title": "Useful tools"
        }, 
        {
            "location": "/Tools/Git/1._Getting_Started/#how-to-write-git-commit-messages", 
            "text": "Writing good commit messages is essential for a project's maintainability. It\u2019s worth taking the time to learn how to write commit messages so that we end having a useful revision history.\nCheck out our guide for writing good commit messages  here", 
            "title": "How to Write Git Commit Messages"
        }, 
        {
            "location": "/Tools/Git/1._Getting_Started/#references", 
            "text": "http://nvie.com/posts/a-successful-git-branching-model/ .  http://martinfowler.com/bliki/FeatureToggle.html .  https://www.atlassian.com/agile/branching .", 
            "title": "References"
        }, 
        {
            "location": "/Tools/Git/2._Branch_Management/", 
            "text": "Branch Management\n\n\nThere are many branch management flows that can be implemented. Some flows might work fine with some projects but can be ineffective with others because of their nature. That\u2019s the reason why there isn't a golden rule to follow when you are creating a branch management flow.\nIn this section we will describe our recommendations, which we have been using in many projects and worked really well.\n\n\nWe can distinct between two types of branches: the \nmain branches\n and the \nsupporting branches\n. The main branches are branches that should never be deleted, these branches represent every stage of the code. The supporting branches always have a limited life time, these branches are created to develop a feature, fixing a bug, etc.\n\n\nImportant:\n Main branches should be protected branches and should require pull request reviews before merging.\n\n\nMain branches\n\n\ndevelop\n Contains all the latest features developed by the team. This is an unstable branch, basically, it is constantly receiving features from the developers.\n\n\nmaster\n Holds the production code, or App/Play Store versions. This is our production branch and it must be stable.\n\n\nqa_testing\n This branch is where the QA team do their tests. It contains all the features that will be released to the client or beta testers.\n\n\nstage\n Holds the latest released version to the client or beta testers. This is a stable branch.\n\n\nThe last 2 (\nqa_testing\n and \nstage\n) are perfect examples of branches that may not fit in your project as well. Feel free to just use \ndevelop\n and \nmaster\n.\n\n\nSupporting Branches\n\n\nfeature\n Every time a developer starts a feature, a new branch out from develop must be created. Once the developer finishes the feature and ends testing it, the feature is ready to be merged into develop. Depending on the project, we encourage creating a pull request, that is reviewed by other devs, and then merged to \ndevelop\n.\nThese branches should be named as:\nfeature/[taskid]_taskname\n\n\nbug\n Every time the QA team reports a bug, or the developer team detects one, that bug must be fixed on a bug branch. These branches should branch out from the qa_testing branch if it exists.\nThese branches should be named as:\nbug/[taskid]_taskname\n\n\nhotfix\n Every time a bug is discovered in stage or in production we should create a hotfix branch to fix this issue. Branching out from stage or master depending on where the bug was detected.\nThese branches should be named as:\nhotfix/[taskid]_taskname\nMerges\n\n\nepic\n Basically this is a feature branch that contains an epic feature. Epic features are big features that can group many small features. Consider including an on/off mechanism inside the code (like a feature toggle). The behaiviour is exactly the same as the feature branch and should be named as:\nepic/[taskid]_taskname\n\n\nEpic branches may not be useful in your project. Also, for all branch names, you may choose to use \n-\n instead of \n_\n, there is no convention around this.\n\n\nMerging vs Rebasing\n\n\nMerging vs rebasing is a really interesting discussion that we won't cover in the KB. We suggest \nthis article\n as the starting point, and we consider it a \nmust read\n for everybody.\n\n\nMerging Branches\n\n\nMerging is Git's way of putting a forked history back together again. The \ngit merge\n command lets you take the independent lines of develop created by \ngit branch\n and integrate them into a single branch.\nUnderstand all about it \nhere\n.\n\n\n\nMain Branches Merges\n\n\ndevelop -\n qa_testing\n Once the features that will be added to the build are completed and merged into develop, we can merge with qa_testing so then the QA team can test the build.\n\n\nqa_testing -\n stage\n Once the QA team review the build and all the bugs found were resolved, we can merge qa_testing to stage.\n\n\nstage -\n master\n Once the Beta testers and the client give us the OK to go live, we are ready to upload the app to the App Store and this will require to merge stage with master.\n\n\nmaster -\n stage\n Every hotfix on master must be merged in stage.\n\n\nstage  -\n qa_testing\n Every hotfix on stage or any aditional code on stage must be merged into qa_testing.\n\n\nqa_testing -\n develop\n Every bugfix on qa_testing or any aditional code on qa_testing must be merged to develop.\n\n\nSupporting Branches Merges\n\n\nFeature -\n develop\n Once a developer completes a task and finishes testing that feature, that feature must be merged into develop.\n\n\nEpic -\n develop\n Once a developer completes an epic feature and finishes testing it, that feature must be merged into develop.\n\n\nBug -\n qa_testing\n Once a developer fixes a bug detected on qa_testing, that fix must be merged into qa_testing.\n\n\nHotfix -\n Stable branch (stage or master)\n Once a developer fixes a bug detected on a stable branch, it must be merged to that stable branch.\n\n\nRebasing Branches\n\n\nMerging is Git's way of putting a forked history back together again. The \ngit merge\n command lets you take the independent lines of develop created by \ngit branch\n and integrate them into a single branch.\nUnderstand all about it \nhere\n.\n\n\n\nDeveloping a feature\n\n\nSo you want to create a new feature, let's call it \nadd-user-auth\n. Your remote repo has \nmaster\n and \ndevelop\n branches, and it looks something like this:\n\n\n\nSo you will \ngit checkout develop\n, and \ngit checkout -b add-user-auth\n. This will create a branch out of the tip of \ndevelop\n. Let's say your feature takes a couple of days of develop. In the meantime, someone introduced changes to \ndevelop\n, and now you have to fix some conflicts before being able to integrate commits on \nadd-user-auth\n. Once you've updated code in \ndevelop\n branch, you need to \ngit checkout add-user-auth\n and \ngit rebase develop\n. This will apply your commits one by one on top of \ndevelop\n branch, thus changing \nadd-user-auth\n base. Now your changes are ready to integrate into \ndevelop\n and merge would be just a fast-forward. Keep in mind you will have to solve conflicts in the process, and maybe solve conflicts on each of your commits. That's why many people squash their commits before doing this. We recommend reading \nthis article\n and \ngit's own documentation\n about it.\n\n\nConclusion\n\n\n\"And that\u2019s all you really need to know to start rebasing your branches. If you would prefer a clean, linear history free of unnecessary merge commits, you should reach for \ngit rebase\n instead of \ngit merge\n when integrating changes from another branch.\n\n\nOn the other hand, if you want to preserve the complete history of your project and avoid the risk of re-writing public commits, you can stick with \ngit merge\n. Either option is perfectly valid, but at least now you have the option of leveraging the benefits of \ngit rebase\n.\"\nref", 
            "title": "2. Branch Management"
        }, 
        {
            "location": "/Tools/Git/2._Branch_Management/#branch-management", 
            "text": "There are many branch management flows that can be implemented. Some flows might work fine with some projects but can be ineffective with others because of their nature. That\u2019s the reason why there isn't a golden rule to follow when you are creating a branch management flow.\nIn this section we will describe our recommendations, which we have been using in many projects and worked really well.  We can distinct between two types of branches: the  main branches  and the  supporting branches . The main branches are branches that should never be deleted, these branches represent every stage of the code. The supporting branches always have a limited life time, these branches are created to develop a feature, fixing a bug, etc.  Important:  Main branches should be protected branches and should require pull request reviews before merging.", 
            "title": "Branch Management"
        }, 
        {
            "location": "/Tools/Git/2._Branch_Management/#main-branches", 
            "text": "develop  Contains all the latest features developed by the team. This is an unstable branch, basically, it is constantly receiving features from the developers.  master  Holds the production code, or App/Play Store versions. This is our production branch and it must be stable.  qa_testing  This branch is where the QA team do their tests. It contains all the features that will be released to the client or beta testers.  stage  Holds the latest released version to the client or beta testers. This is a stable branch.  The last 2 ( qa_testing  and  stage ) are perfect examples of branches that may not fit in your project as well. Feel free to just use  develop  and  master .", 
            "title": "Main branches"
        }, 
        {
            "location": "/Tools/Git/2._Branch_Management/#supporting-branches", 
            "text": "feature  Every time a developer starts a feature, a new branch out from develop must be created. Once the developer finishes the feature and ends testing it, the feature is ready to be merged into develop. Depending on the project, we encourage creating a pull request, that is reviewed by other devs, and then merged to  develop .\nThese branches should be named as:\nfeature/[taskid]_taskname  bug  Every time the QA team reports a bug, or the developer team detects one, that bug must be fixed on a bug branch. These branches should branch out from the qa_testing branch if it exists.\nThese branches should be named as:\nbug/[taskid]_taskname  hotfix  Every time a bug is discovered in stage or in production we should create a hotfix branch to fix this issue. Branching out from stage or master depending on where the bug was detected.\nThese branches should be named as:\nhotfix/[taskid]_taskname\nMerges  epic  Basically this is a feature branch that contains an epic feature. Epic features are big features that can group many small features. Consider including an on/off mechanism inside the code (like a feature toggle). The behaiviour is exactly the same as the feature branch and should be named as:\nepic/[taskid]_taskname  Epic branches may not be useful in your project. Also, for all branch names, you may choose to use  -  instead of  _ , there is no convention around this.", 
            "title": "Supporting Branches"
        }, 
        {
            "location": "/Tools/Git/2._Branch_Management/#merging-vs-rebasing", 
            "text": "Merging vs rebasing is a really interesting discussion that we won't cover in the KB. We suggest  this article  as the starting point, and we consider it a  must read  for everybody.", 
            "title": "Merging vs Rebasing"
        }, 
        {
            "location": "/Tools/Git/2._Branch_Management/#merging-branches", 
            "text": "Merging is Git's way of putting a forked history back together again. The  git merge  command lets you take the independent lines of develop created by  git branch  and integrate them into a single branch.\nUnderstand all about it  here .", 
            "title": "Merging Branches"
        }, 
        {
            "location": "/Tools/Git/2._Branch_Management/#main-branches-merges", 
            "text": "develop -  qa_testing  Once the features that will be added to the build are completed and merged into develop, we can merge with qa_testing so then the QA team can test the build.  qa_testing -  stage  Once the QA team review the build and all the bugs found were resolved, we can merge qa_testing to stage.  stage -  master  Once the Beta testers and the client give us the OK to go live, we are ready to upload the app to the App Store and this will require to merge stage with master.  master -  stage  Every hotfix on master must be merged in stage.  stage  -  qa_testing  Every hotfix on stage or any aditional code on stage must be merged into qa_testing.  qa_testing -  develop  Every bugfix on qa_testing or any aditional code on qa_testing must be merged to develop.", 
            "title": "Main Branches Merges"
        }, 
        {
            "location": "/Tools/Git/2._Branch_Management/#supporting-branches-merges", 
            "text": "Feature -  develop  Once a developer completes a task and finishes testing that feature, that feature must be merged into develop.  Epic -  develop  Once a developer completes an epic feature and finishes testing it, that feature must be merged into develop.  Bug -  qa_testing  Once a developer fixes a bug detected on qa_testing, that fix must be merged into qa_testing.  Hotfix -  Stable branch (stage or master)  Once a developer fixes a bug detected on a stable branch, it must be merged to that stable branch.", 
            "title": "Supporting Branches Merges"
        }, 
        {
            "location": "/Tools/Git/2._Branch_Management/#rebasing-branches", 
            "text": "Merging is Git's way of putting a forked history back together again. The  git merge  command lets you take the independent lines of develop created by  git branch  and integrate them into a single branch.\nUnderstand all about it  here .", 
            "title": "Rebasing Branches"
        }, 
        {
            "location": "/Tools/Git/2._Branch_Management/#developing-a-feature", 
            "text": "So you want to create a new feature, let's call it  add-user-auth . Your remote repo has  master  and  develop  branches, and it looks something like this:  So you will  git checkout develop , and  git checkout -b add-user-auth . This will create a branch out of the tip of  develop . Let's say your feature takes a couple of days of develop. In the meantime, someone introduced changes to  develop , and now you have to fix some conflicts before being able to integrate commits on  add-user-auth . Once you've updated code in  develop  branch, you need to  git checkout add-user-auth  and  git rebase develop . This will apply your commits one by one on top of  develop  branch, thus changing  add-user-auth  base. Now your changes are ready to integrate into  develop  and merge would be just a fast-forward. Keep in mind you will have to solve conflicts in the process, and maybe solve conflicts on each of your commits. That's why many people squash their commits before doing this. We recommend reading  this article  and  git's own documentation  about it.", 
            "title": "Developing a feature"
        }, 
        {
            "location": "/Tools/Git/2._Branch_Management/#conclusion", 
            "text": "\"And that\u2019s all you really need to know to start rebasing your branches. If you would prefer a clean, linear history free of unnecessary merge commits, you should reach for  git rebase  instead of  git merge  when integrating changes from another branch.  On the other hand, if you want to preserve the complete history of your project and avoid the risk of re-writing public commits, you can stick with  git merge . Either option is perfectly valid, but at least now you have the option of leveraging the benefits of  git rebase .\" ref", 
            "title": "Conclusion"
        }, 
        {
            "location": "/Tools/Git/3._Tools/", 
            "text": "SourceTree\n  is a visual git client, it is very useful to have fast overviews over your repos. On this \nlink\n you will find the tool documentation.\n\n\n\n\n\n\np4merge\n This is a visual merge and diff tool. \nHere\n is an installation guide.", 
            "title": "3. Tools"
        }, 
        {
            "location": "/Tools/Git/4._Messages/", 
            "text": "Other developers, especially you-in-two-weeks and you-from-next-year, will thank you for your forethought and verbosity when they run git blame to see why that conditional is there.\n\n\nPlease refer to this link for an in-depth review of the topic: \nhttps://chris.beams.io/posts/git-commit/\n\n\nUseful Tips For A Better Commit Message\n\n\n\n\nThe first line should always be 50 characters or less and it should be followed by a blank line.\n\n\n\n\nNever use the -m \n / --message=\n flag to git commit.\n    It gives you a poor mindset right off the bat as you will feel that you have to fit your commit message into the terminal command, and makes the commit feel more like a one-off argument than a page in history:\n\n\ngit commit -m \"Fix login bug\"\n\n\n\n\n\n\nAnswer the following questions:\n\n\na. Why is this change necessary?\n\n\nThis question tells reviewers of your pull request what to expect in the commit, allowing them to easily identify and point out unrelated changes.\n\n\nb. How does it address the issue?\n\n\nDescribe, at a high level, what was done to affect change. \"Introduce a red/black tree to increase search speed\" or \"Remove \n, which was causing \n\" are good examples.\n\n\nIf your change is obvious, you may be able to omit addressing this question.\n\n\nc. What side effects does this change have?\n\n\nThis is the most important question to answer, as it can point out problems where you are making too many changes in one commit or branch. One or two bullet points for related changes may be okay, but five or six are likely indicators of a commit that is doing too many things.\n\n\nYour team should have guidelines and rules-of-thumb for how much can be done in a single commit/branch.\n\n\n\n\n\n\nConsider making including a link to the issue/story/card in the commit message a standard for your project. Full urls are more useful than issue numbers, as they are more permanent and avoid confusion over which issue tracker it references.\n\n\n\n\n\n\nPro-tip: configure a template so that when using \ngit commit\n the editor opens with the message template. This way it's easier to keep writing good messages! \nhttps://gist.github.com/adeekshith/cd4c95a064977cdc6c50\n\n\nPro-tip: configure git so that every time it opens an editor it picks one of your choice. Working with vim or whatever default can be inefficient at times and intimidating to those that don't understand the tool. This way it's easier to write good messages, rebasing and much more! \nhttps://help.github.com/articles/associating-text-editors-with-git/\n\n\nMore about commit messages: \nhttp://tbaggery.com/2008/04/19/a-note-about-git-commit-messages.html", 
            "title": "4. Messages"
        }, 
        {
            "location": "/Tools/Git/4._Messages/#useful-tips-for-a-better-commit-message", 
            "text": "The first line should always be 50 characters or less and it should be followed by a blank line.   Never use the -m   / --message=  flag to git commit.\n    It gives you a poor mindset right off the bat as you will feel that you have to fit your commit message into the terminal command, and makes the commit feel more like a one-off argument than a page in history:  git commit -m \"Fix login bug\"    Answer the following questions:  a. Why is this change necessary?  This question tells reviewers of your pull request what to expect in the commit, allowing them to easily identify and point out unrelated changes.  b. How does it address the issue?  Describe, at a high level, what was done to affect change. \"Introduce a red/black tree to increase search speed\" or \"Remove  , which was causing  \" are good examples.  If your change is obvious, you may be able to omit addressing this question.  c. What side effects does this change have?  This is the most important question to answer, as it can point out problems where you are making too many changes in one commit or branch. One or two bullet points for related changes may be okay, but five or six are likely indicators of a commit that is doing too many things.  Your team should have guidelines and rules-of-thumb for how much can be done in a single commit/branch.    Consider making including a link to the issue/story/card in the commit message a standard for your project. Full urls are more useful than issue numbers, as they are more permanent and avoid confusion over which issue tracker it references.    Pro-tip: configure a template so that when using  git commit  the editor opens with the message template. This way it's easier to keep writing good messages!  https://gist.github.com/adeekshith/cd4c95a064977cdc6c50  Pro-tip: configure git so that every time it opens an editor it picks one of your choice. Working with vim or whatever default can be inefficient at times and intimidating to those that don't understand the tool. This way it's easier to write good messages, rebasing and much more!  https://help.github.com/articles/associating-text-editors-with-git/  More about commit messages:  http://tbaggery.com/2008/04/19/a-note-about-git-commit-messages.html", 
            "title": "Useful Tips For A Better Commit Message"
        }
    ]
}